// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeedge/beehive/pkg/core (interfaces: Module)
//
// Generated by this command:
//
//	mockgen -package=beehive -destination=beehive/fake_module.go github.com/kubeedge/beehive/pkg/core Module
//

// Package beehive is a generated GoMock package.
package beehive

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/kubeedge/beehive/pkg/core"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
	isgomock struct{}
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// Enable mocks base method.
func (m *MockModule) Enable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockModuleMockRecorder) Enable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockModule)(nil).Enable))
}

// Group mocks base method.
func (m *MockModule) Group() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group")
	ret0, _ := ret[0].(string)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockModuleMockRecorder) Group() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockModule)(nil).Group))
}

// Name mocks base method.
func (m *MockModule) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockModuleMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockModule)(nil).Name))
}

// RestartPolicy mocks base method.
func (m *MockModule) RestartPolicy() *core.ModuleRestartPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartPolicy")
	ret0, _ := ret[0].(*core.ModuleRestartPolicy)
	return ret0
}

// RestartPolicy indicates an expected call of RestartPolicy.
func (mr *MockModuleMockRecorder) RestartPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartPolicy", reflect.TypeOf((*MockModule)(nil).RestartPolicy))
}

// Start mocks base method.
func (m *MockModule) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockModule)(nil).Start))
}
