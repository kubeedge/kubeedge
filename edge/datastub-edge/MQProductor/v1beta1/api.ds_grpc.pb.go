//
//Copyright 2023 The KubeEdge Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// To regenerate api.ds.pb.go run hack/generate-ds.sh

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api.ds.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataStubService_PushDeviceData_FullMethodName = "/ds.v1beta1.DataStubService/PushDeviceData"
)

// DataStubServiceClient is the client API for DataStubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataStubService defines the service for data stub
type DataStubServiceClient interface {
	// PushDeviceData is used to push data to the data stub
	PushDeviceData(ctx context.Context, in *PushDeviceDataRequest, opts ...grpc.CallOption) (*PushDeviceDataResponse, error)
}

type dataStubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStubServiceClient(cc grpc.ClientConnInterface) DataStubServiceClient {
	return &dataStubServiceClient{cc}
}

func (c *dataStubServiceClient) PushDeviceData(ctx context.Context, in *PushDeviceDataRequest, opts ...grpc.CallOption) (*PushDeviceDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushDeviceDataResponse)
	err := c.cc.Invoke(ctx, DataStubService_PushDeviceData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStubServiceServer is the server API for DataStubService service.
// All implementations must embed UnimplementedDataStubServiceServer
// for forward compatibility.
//
// DataStubService defines the service for data stub
type DataStubServiceServer interface {
	// PushDeviceData is used to push data to the data stub
	PushDeviceData(context.Context, *PushDeviceDataRequest) (*PushDeviceDataResponse, error)
	mustEmbedUnimplementedDataStubServiceServer()
}

// UnimplementedDataStubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataStubServiceServer struct{}

func (UnimplementedDataStubServiceServer) PushDeviceData(context.Context, *PushDeviceDataRequest) (*PushDeviceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDeviceData not implemented")
}
func (UnimplementedDataStubServiceServer) mustEmbedUnimplementedDataStubServiceServer() {}
func (UnimplementedDataStubServiceServer) testEmbeddedByValue()                         {}

// UnsafeDataStubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStubServiceServer will
// result in compilation errors.
type UnsafeDataStubServiceServer interface {
	mustEmbedUnimplementedDataStubServiceServer()
}

func RegisterDataStubServiceServer(s grpc.ServiceRegistrar, srv DataStubServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataStubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataStubService_ServiceDesc, srv)
}

func _DataStubService_PushDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStubServiceServer).PushDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStubService_PushDeviceData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStubServiceServer).PushDeviceData(ctx, req.(*PushDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataStubService_ServiceDesc is the grpc.ServiceDesc for DataStubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataStubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ds.v1beta1.DataStubService",
	HandlerType: (*DataStubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushDeviceData",
			Handler:    _DataStubService_PushDeviceData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.ds.proto",
}
