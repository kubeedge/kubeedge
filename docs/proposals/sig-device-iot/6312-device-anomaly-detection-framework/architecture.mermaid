flowchart LR
    %% System Component Architecture
    %% Layers: Device Side -> Edge Side -> Cloud Side (CloudCore/External Services) -> Storage/Visualization/Alarms

    subgraph DeviceSide["Device Side"]
      Dev["Device<br/>(Physical Device)"];
      Map["Mapper<br/>(Same type of device collection)"];
      Dev --> Map;
    end

    subgraph EdgeSide["Edge Side"]
      Edge["EdgeCore"];
    end

    subgraph CloudCore["Cloud Side: CloudCore"]
      DC["DeviceController"];
      TMH["TelemetryMirrorHook<br/>(Full mirroring)"];
      DRH["DetectorRouterHooks<br/>(Multiple instances, configurable Filter)"];
      DC -- "Mirroring Events" --> TMH;
      DC -- "Meets Filter" --> DRH;
    end

    subgraph External["Cloud Side: External Services"]
      subgraph DataHub["TelemetryDataHub"]
        TDH["Ingest & Query API"];
        Store[("Timeseries/Object Storage")];
        Console["DataHub Console<br/>(Filter/Export/Preview)"];
        TDH --- Store;
        Console --- TDH;
      end

      subgraph Detectors["Anomaly Detectors"]
        AD1["AnomalyDetector A<br/>(gRPC Bidirectional Stream, Trained Model)"];
        AD2["AnomalyDetector B<br/>(gRPC Bidirectional Stream, Trained Model)"];
        DConsole["Detector Console<br/>(Result Visualization/Debugging)"];
        DConsole --- AD1;
        DConsole --- AD2;
      end
    end

    subgraph K8sAPI["Kubernetes Control Plane"]
      APIServer[("Kubernetes API Server")];
    end

    %% Main Reporting Link
    Map --> Edge --> DC --> APIServer;

    TMH --> TDH;

    %% Route to Detectors
    DRH -- "gRPC stream" --> AD1;
    DRH -- "gRPC stream" --> AD2;

    %% Detection Result Write-back and Alarming
    AD1 -. "Detection Result" .-> DC;
    %% AD2 -- "Detection Result" --> DC;
