//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplication":            schema_pkg_apis_apps_v1alpha1_EdgeApplication(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplicationList":        schema_pkg_apis_apps_v1alpha1_EdgeApplicationList(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplicationSpec":        schema_pkg_apis_apps_v1alpha1_EdgeApplicationSpec(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplicationStatus":      schema_pkg_apis_apps_v1alpha1_EdgeApplicationStatus(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ImageOverrider":             schema_pkg_apis_apps_v1alpha1_ImageOverrider(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ImagePredicate":             schema_pkg_apis_apps_v1alpha1_ImagePredicate(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.Manifest":                   schema_pkg_apis_apps_v1alpha1_Manifest(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ManifestStatus":             schema_pkg_apis_apps_v1alpha1_ManifestStatus(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroup":                  schema_pkg_apis_apps_v1alpha1_NodeGroup(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroupList":              schema_pkg_apis_apps_v1alpha1_NodeGroupList(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroupSpec":              schema_pkg_apis_apps_v1alpha1_NodeGroupSpec(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroupStatus":            schema_pkg_apis_apps_v1alpha1_NodeGroupStatus(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeStatus":                 schema_pkg_apis_apps_v1alpha1_NodeStatus(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.Overriders":                 schema_pkg_apis_apps_v1alpha1_Overriders(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ResourceIdentifier":         schema_pkg_apis_apps_v1alpha1_ResourceIdentifier(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ResourceTemplate":           schema_pkg_apis_apps_v1alpha1_ResourceTemplate(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.TargetNodeGroup":            schema_pkg_apis_apps_v1alpha1_TargetNodeGroup(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.WorkloadScope":              schema_pkg_apis_apps_v1alpha1_WorkloadScope(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.Device":                   schema_pkg_apis_devices_v1beta1_Device(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.DeviceModel":              schema_pkg_apis_devices_v1beta1_DeviceModel(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/operations/v1alpha1.NodeUpgradeJob":       schema_pkg_apis_operations_v1alpha1_NodeUpgradeJob(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessClusterRoleBinding": schema_pkg_apis_policy_v1alpha1_AccessClusterRoleBinding(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessRoleBinding":        schema_pkg_apis_policy_v1alpha1_AccessRoleBinding(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessSpec":               schema_pkg_apis_policy_v1alpha1_AccessSpec(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessStatus":             schema_pkg_apis_policy_v1alpha1_AccessStatus(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.ServiceAccountAccess":     schema_pkg_apis_policy_v1alpha1_ServiceAccountAccess(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.ServiceAccountAccessList": schema_pkg_apis_policy_v1alpha1_ServiceAccountAccessList(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ClusterObjectSync": schema_pkg_apis_reliablesyncs_v1alpha1_ClusterObjectSync(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSync":        schema_pkg_apis_reliablesyncs_v1alpha1_ObjectSync(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/rules/v1.Rule":                            schema_pkg_apis_rules_v1_Rule(ref),
		"github.com/kubeedge/kubeedge/pkg/apis/rules/v1.RuleEndpoint":                    schema_pkg_apis_rules_v1_RuleEndpoint(ref),
	}
}

func schema_pkg_apis_apps_v1alpha1_EdgeApplication(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EdgeApplication is the Schema for the edgeapplications API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec represents the desired behavior of EdgeApplication.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplicationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status represents the status of PropagationStatus.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplicationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplicationSpec", "github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplicationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_apps_v1alpha1_EdgeApplicationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EdgeApplicationList contains a list of EdgeApplication",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplication"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.EdgeApplication", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_apps_v1alpha1_EdgeApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EdgeApplicationSpec defines the desired state of EdgeApplication",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"workloadTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkloadTemplate contains original templates of resources to be deployed as an EdgeApplication.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ResourceTemplate"),
						},
					},
					"workloadScope": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkloadScope represents which node groups the workload will be deployed in.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.WorkloadScope"),
						},
					},
				},
				Required: []string{"workloadScope"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ResourceTemplate", "github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.WorkloadScope"},
	}
}

func schema_pkg_apis_apps_v1alpha1_EdgeApplicationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EdgeApplicationStatus defines the observed state of EdgeApplication",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"workloadStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkloadStatus contains running statuses of generated resources.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ManifestStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ManifestStatus"},
	}
}

func schema_pkg_apis_apps_v1alpha1_ImageOverrider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageOverrider represents the rules dedicated to handling image overrides.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"predicate": {
						SchemaProps: spec.SchemaProps{
							Description: "Predicate filters images before applying the rule.\n\nDefaults to nil, in that case, the system will automatically detect image fields if the resource type is Pod, ReplicaSet, Deployment or StatefulSet by following rule:\n  - Pod: /spec/containers/<N>/image\n  - ReplicaSet: /spec/template/spec/containers/<N>/image\n  - Deployment: /spec/template/spec/containers/<N>/image\n  - StatefulSet: /spec/template/spec/containers/<N>/image\nIn addition, all images will be processed if the resource object has more than one containers.\n\nIf not nil, only images matches the filters will be processed.",
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ImagePredicate"),
						},
					},
					"component": {
						SchemaProps: spec.SchemaProps{
							Description: "Component is part of image name. Basically we presume an image can be made of '[registry/]repository[:tag]'. The registry could be: - k8s.gcr.io - fictional.registry.example:10443 The repository could be: - kube-apiserver - fictional/nginx The tag cloud be: - latest - v1.19.1 - @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Description: "Operator represents the operator which will apply on the image.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Value to be applied to image. Must not be empty when operator is 'add' or 'replace'. Defaults to empty and ignored when operator is 'remove'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"component", "operator"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ImagePredicate"},
	}
}

func schema_pkg_apis_apps_v1alpha1_ImagePredicate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImagePredicate describes images filter.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path indicates the path of target field",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_pkg_apis_apps_v1alpha1_Manifest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Manifest represents a resource to be deployed on managed node groups.",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_apps_v1alpha1_ManifestStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestStatus contains running status of a specific manifest in spec.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Description: "Identifier represents the identity of a resource linking to manifests in spec.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ResourceIdentifier"),
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions contain the different condition statuses for this manifest. Valid condition types are: 1. Processing: this workload is under processing and the current state of manifest does not match the desired. 2. Available: the current status of this workload matches the desired.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"identifier"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ResourceIdentifier"},
	}
}

func schema_pkg_apis_apps_v1alpha1_NodeGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroup is the Schema for the nodegroups API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec represents the specification of the desired behavior of member nodegroup.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status represents the status of member nodegroup.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroupSpec", "github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_apps_v1alpha1_NodeGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroupList contains a list of NodeGroup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeGroup", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_apps_v1alpha1_NodeGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroupSpec defines the desired state of NodeGroup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes contains names of all the nodes in the nodegroup.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"matchLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "MatchLabels are used to select nodes that have these labels.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_apps_v1alpha1_NodeGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroupStatus contains the observed status of all selected nodes in this NodeGroup, including nodes that have been one of the members of this NodeGroup and those have not.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeStatuses": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeStatuses is a status list of all selected nodes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.NodeStatus"},
	}
}

func schema_pkg_apis_apps_v1alpha1_NodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeStatus contains status of node that selected by this NodeGroup.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName contains name of this node.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readyStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadyStatus contains ready status of this node.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selectionStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "SelectionStatus contains status of the selection result for this node.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selectionStatusReason": {
						SchemaProps: spec.SchemaProps{
							Description: "SelectionStatusReason contains human-readable reason for this SelectionStatus.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"nodeName", "readyStatus", "selectionStatus"},
			},
		},
	}
}

func schema_pkg_apis_apps_v1alpha1_Overriders(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Overriders represents the override rules that would apply on resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas will override the replicas field of deployment",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"imageOverriders": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageOverriders represents the rules dedicated to handling image overrides.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ImageOverrider"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.ImageOverrider"},
	}
}

func schema_pkg_apis_apps_v1alpha1_ResourceIdentifier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceIdentifier provides the identifiers needed to interact with any arbitrary object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ordinal": {
						SchemaProps: spec.SchemaProps{
							Description: "Ordinal represents an index in manifests list, so the condition can still be linked to a manifest even though manifest cannot be parsed successfully.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "Group is the group of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is the kind of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is the resource type of the resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace is the namespace of the resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the resource",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"ordinal"},
			},
		},
	}
}

func schema_pkg_apis_apps_v1alpha1_ResourceTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceTemplate represents original templates of resources to be deployed as an EdgeApplication.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"manifests": {
						SchemaProps: spec.SchemaProps{
							Description: "Manifests represent a list of Kubernetes resources to be deployed on the managed node groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.Manifest"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.Manifest"},
	}
}

func schema_pkg_apis_apps_v1alpha1_TargetNodeGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TargetNodeGroup represents the target node group of workload to be deployed, including override rules to apply for this node group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name represents the name of target node group",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overriders": {
						SchemaProps: spec.SchemaProps{
							Description: "Overriders represents the override rules that would apply on workload.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.Overriders"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.Overriders"},
	}
}

func schema_pkg_apis_apps_v1alpha1_WorkloadScope(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadScope represents which node groups the workload should be deployed in.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetNodeGroups": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetNodeGroups represents the target node groups of workload to be deployed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.TargetNodeGroup"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/apps/v1alpha1.TargetNodeGroup"},
	}
}

func schema_pkg_apis_devices_v1beta1_Device(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Device is the Schema for the devices API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.DeviceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.DeviceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.DeviceSpec", "github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.DeviceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_devices_v1beta1_DeviceModel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeviceModel is the Schema for the device model API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.DeviceModelSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/devices/v1beta1.DeviceModelSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operations_v1alpha1_NodeUpgradeJob(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeUpgradeJob is used to upgrade edge node from cloud side.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the desired behavior of NodeUpgradeJob.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/operations/v1alpha1.NodeUpgradeJobSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the NodeUpgradeJob.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/operations/v1alpha1.NodeUpgradeJobStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/operations/v1alpha1.NodeUpgradeJobSpec", "github.com/kubeedge/kubeedge/pkg/apis/operations/v1alpha1.NodeUpgradeJobStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_policy_v1alpha1_AccessClusterRoleBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccessClusterRoleBinding represents rbac ClusterRoleBinding plus detailed ClusterRole info.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clusterRoleBinding": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterRoleBinding represents rbac ClusterRoleBinding.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/rbac/v1.ClusterRoleBinding"),
						},
					},
					"rules": {
						SchemaProps: spec.SchemaProps{
							Description: "Rules contains role rules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/rbac/v1.PolicyRule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/rbac/v1.ClusterRoleBinding", "k8s.io/api/rbac/v1.PolicyRule"},
	}
}

func schema_pkg_apis_policy_v1alpha1_AccessRoleBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccessRoleBinding represents rbac rolebinding plus detailed role info.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"roleBinding": {
						SchemaProps: spec.SchemaProps{
							Description: "RoleBinding represents rbac rolebinding.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/rbac/v1.RoleBinding"),
						},
					},
					"rules": {
						SchemaProps: spec.SchemaProps{
							Description: "Rules contains role rules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/rbac/v1.PolicyRule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/rbac/v1.PolicyRule", "k8s.io/api/rbac/v1.RoleBinding"},
	}
}

func schema_pkg_apis_policy_v1alpha1_AccessSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccessSpec defines the desired state of AccessSpec",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccount is one-to-one corresponding relations with the serviceaccountaccess.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/api/core/v1.ServiceAccount"),
						},
					},
					"serviceAccountUid": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccountUID is the uid of serviceaccount.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accessRoleBinding": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessRoleBinding represents rbac rolebinding plus detailed role info.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessRoleBinding"),
									},
								},
							},
						},
					},
					"accessClusterRoleBinding": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessClusterRoleBinding represents rbac ClusterRoleBinding plus detailed ClusterRole info.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessClusterRoleBinding"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessClusterRoleBinding", "github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessRoleBinding", "k8s.io/api/core/v1.ServiceAccount"},
	}
}

func schema_pkg_apis_policy_v1alpha1_AccessStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccessStatus defines the observed state of ServiceAccountAccess",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeList": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeList represents the node name which store the rules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_policy_v1alpha1_ServiceAccountAccess(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccountAccess is the Schema for the ServiceAccountAccess API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec represents the specification of rbac.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status represents the node list which store the rules.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessSpec", "github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.AccessStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_policy_v1alpha1_ServiceAccountAccessList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccountAccessList contains a list of ServiceAccountAccess",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.ServiceAccountAccess"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/policy/v1alpha1.ServiceAccountAccess", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_reliablesyncs_v1alpha1_ClusterObjectSync(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterObjectSync stores the state of the cluster level, nonNamespaced object that was successfully persisted to the edge node. ClusterObjectSync name is a concatenation of the node name which receiving the object and the object UUID.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncSpec", "github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_reliablesyncs_v1alpha1_ObjectSync(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ObjectSync stores the state of the namespaced object that was successfully persisted to the edge node. ObjectSync name is a concatenation of the node name which receiving the object and the object UUID.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard Kubernetes object's metadata.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncSpec", "github.com/kubeedge/kubeedge/pkg/apis/reliablesyncs/v1alpha1.ObjectSyncStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rules_v1_Rule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the Schema for the rules API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/rules/v1.RuleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/rules/v1.RuleStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/rules/v1.RuleSpec", "github.com/kubeedge/kubeedge/pkg/apis/rules/v1.RuleStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rules_v1_RuleEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuleEndpoint is the Schema for the ruleendpoints API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/kubeedge/kubeedge/pkg/apis/rules/v1.RuleEndpointSpec"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/kubeedge/kubeedge/pkg/apis/rules/v1.RuleEndpointSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}
