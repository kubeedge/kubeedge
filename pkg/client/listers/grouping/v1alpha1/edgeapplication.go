/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/kubeedge/pkg/apis/grouping/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EdgeApplicationLister helps list EdgeApplications.
// All objects returned here must be treated as read-only.
type EdgeApplicationLister interface {
	// List lists all EdgeApplications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeApplication, err error)
	// EdgeApplications returns an object that can list and get EdgeApplications.
	EdgeApplications(namespace string) EdgeApplicationNamespaceLister
	EdgeApplicationListerExpansion
}

// edgeApplicationLister implements the EdgeApplicationLister interface.
type edgeApplicationLister struct {
	indexer cache.Indexer
}

// NewEdgeApplicationLister returns a new EdgeApplicationLister.
func NewEdgeApplicationLister(indexer cache.Indexer) EdgeApplicationLister {
	return &edgeApplicationLister{indexer: indexer}
}

// List lists all EdgeApplications in the indexer.
func (s *edgeApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeApplication))
	})
	return ret, err
}

// EdgeApplications returns an object that can list and get EdgeApplications.
func (s *edgeApplicationLister) EdgeApplications(namespace string) EdgeApplicationNamespaceLister {
	return edgeApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EdgeApplicationNamespaceLister helps list and get EdgeApplications.
// All objects returned here must be treated as read-only.
type EdgeApplicationNamespaceLister interface {
	// List lists all EdgeApplications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeApplication, err error)
	// Get retrieves the EdgeApplication from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EdgeApplication, error)
	EdgeApplicationNamespaceListerExpansion
}

// edgeApplicationNamespaceLister implements the EdgeApplicationNamespaceLister
// interface.
type edgeApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EdgeApplications in the indexer for a given namespace.
func (s edgeApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeApplication))
	})
	return ret, err
}

// Get retrieves the EdgeApplication from the indexer for a given namespace and name.
func (s edgeApplicationNamespaceLister) Get(name string) (*v1alpha1.EdgeApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("edgeapplication"), name)
	}
	return obj.(*v1alpha1.EdgeApplication), nil
}
