/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubeedge/kubeedge/cloud/pkg/apis/rules/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RuleEndpointLister helps list RuleEndpoints.
// All objects returned here must be treated as read-only.
type RuleEndpointLister interface {
	// List lists all RuleEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RuleEndpoint, err error)
	// RuleEndpoints returns an object that can list and get RuleEndpoints.
	RuleEndpoints(namespace string) RuleEndpointNamespaceLister
	RuleEndpointListerExpansion
}

// ruleEndpointLister implements the RuleEndpointLister interface.
type ruleEndpointLister struct {
	indexer cache.Indexer
}

// NewRuleEndpointLister returns a new RuleEndpointLister.
func NewRuleEndpointLister(indexer cache.Indexer) RuleEndpointLister {
	return &ruleEndpointLister{indexer: indexer}
}

// List lists all RuleEndpoints in the indexer.
func (s *ruleEndpointLister) List(selector labels.Selector) (ret []*v1.RuleEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RuleEndpoint))
	})
	return ret, err
}

// RuleEndpoints returns an object that can list and get RuleEndpoints.
func (s *ruleEndpointLister) RuleEndpoints(namespace string) RuleEndpointNamespaceLister {
	return ruleEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RuleEndpointNamespaceLister helps list and get RuleEndpoints.
// All objects returned here must be treated as read-only.
type RuleEndpointNamespaceLister interface {
	// List lists all RuleEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RuleEndpoint, err error)
	// Get retrieves the RuleEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RuleEndpoint, error)
	RuleEndpointNamespaceListerExpansion
}

// ruleEndpointNamespaceLister implements the RuleEndpointNamespaceLister
// interface.
type ruleEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RuleEndpoints in the indexer for a given namespace.
func (s ruleEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1.RuleEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RuleEndpoint))
	})
	return ret, err
}

// Get retrieves the RuleEndpoint from the indexer for a given namespace and name.
func (s ruleEndpointNamespaceLister) Get(name string) (*v1.RuleEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ruleendpoint"), name)
	}
	return obj.(*v1.RuleEndpoint), nil
}
