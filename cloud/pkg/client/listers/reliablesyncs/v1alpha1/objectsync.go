/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/kubeedge/cloud/pkg/apis/reliablesyncs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectSyncLister helps list ObjectSyncs.
// All objects returned here must be treated as read-only.
type ObjectSyncLister interface {
	// List lists all ObjectSyncs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectSync, err error)
	// ObjectSyncs returns an object that can list and get ObjectSyncs.
	ObjectSyncs(namespace string) ObjectSyncNamespaceLister
	ObjectSyncListerExpansion
}

// objectSyncLister implements the ObjectSyncLister interface.
type objectSyncLister struct {
	indexer cache.Indexer
}

// NewObjectSyncLister returns a new ObjectSyncLister.
func NewObjectSyncLister(indexer cache.Indexer) ObjectSyncLister {
	return &objectSyncLister{indexer: indexer}
}

// List lists all ObjectSyncs in the indexer.
func (s *objectSyncLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectSync, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectSync))
	})
	return ret, err
}

// ObjectSyncs returns an object that can list and get ObjectSyncs.
func (s *objectSyncLister) ObjectSyncs(namespace string) ObjectSyncNamespaceLister {
	return objectSyncNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectSyncNamespaceLister helps list and get ObjectSyncs.
// All objects returned here must be treated as read-only.
type ObjectSyncNamespaceLister interface {
	// List lists all ObjectSyncs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectSync, err error)
	// Get retrieves the ObjectSync from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectSync, error)
	ObjectSyncNamespaceListerExpansion
}

// objectSyncNamespaceLister implements the ObjectSyncNamespaceLister
// interface.
type objectSyncNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectSyncs in the indexer for a given namespace.
func (s objectSyncNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectSync, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectSync))
	})
	return ret, err
}

// Get retrieves the ObjectSync from the indexer for a given namespace and name.
func (s objectSyncNamespaceLister) Get(name string) (*v1alpha1.ObjectSync, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectsync"), name)
	}
	return obj.(*v1alpha1.ObjectSync), nil
}
