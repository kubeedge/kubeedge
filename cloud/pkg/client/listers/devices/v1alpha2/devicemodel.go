/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/kubeedge/kubeedge/cloud/pkg/apis/devices/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceModelLister helps list DeviceModels.
// All objects returned here must be treated as read-only.
type DeviceModelLister interface {
	// List lists all DeviceModels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.DeviceModel, err error)
	// DeviceModels returns an object that can list and get DeviceModels.
	DeviceModels(namespace string) DeviceModelNamespaceLister
	DeviceModelListerExpansion
}

// deviceModelLister implements the DeviceModelLister interface.
type deviceModelLister struct {
	indexer cache.Indexer
}

// NewDeviceModelLister returns a new DeviceModelLister.
func NewDeviceModelLister(indexer cache.Indexer) DeviceModelLister {
	return &deviceModelLister{indexer: indexer}
}

// List lists all DeviceModels in the indexer.
func (s *deviceModelLister) List(selector labels.Selector) (ret []*v1alpha2.DeviceModel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.DeviceModel))
	})
	return ret, err
}

// DeviceModels returns an object that can list and get DeviceModels.
func (s *deviceModelLister) DeviceModels(namespace string) DeviceModelNamespaceLister {
	return deviceModelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceModelNamespaceLister helps list and get DeviceModels.
// All objects returned here must be treated as read-only.
type DeviceModelNamespaceLister interface {
	// List lists all DeviceModels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.DeviceModel, err error)
	// Get retrieves the DeviceModel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.DeviceModel, error)
	DeviceModelNamespaceListerExpansion
}

// deviceModelNamespaceLister implements the DeviceModelNamespaceLister
// interface.
type deviceModelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceModels in the indexer for a given namespace.
func (s deviceModelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.DeviceModel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.DeviceModel))
	})
	return ret, err
}

// Get retrieves the DeviceModel from the indexer for a given namespace and name.
func (s deviceModelNamespaceLister) Get(name string) (*v1alpha2.DeviceModel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("devicemodel"), name)
	}
	return obj.(*v1alpha2.DeviceModel), nil
}
