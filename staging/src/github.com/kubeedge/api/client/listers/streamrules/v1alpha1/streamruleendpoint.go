/*
Copyright The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeedge/api/apis/streamrules/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StreamRuleEndpointLister helps list StreamRuleEndpoints.
// All objects returned here must be treated as read-only.
type StreamRuleEndpointLister interface {
	// List lists all StreamRuleEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StreamRuleEndpoint, err error)
	// StreamRuleEndpoints returns an object that can list and get StreamRuleEndpoints.
	StreamRuleEndpoints(namespace string) StreamRuleEndpointNamespaceLister
	StreamRuleEndpointListerExpansion
}

// streamRuleEndpointLister implements the StreamRuleEndpointLister interface.
type streamRuleEndpointLister struct {
	indexer cache.Indexer
}

// NewStreamRuleEndpointLister returns a new StreamRuleEndpointLister.
func NewStreamRuleEndpointLister(indexer cache.Indexer) StreamRuleEndpointLister {
	return &streamRuleEndpointLister{indexer: indexer}
}

// List lists all StreamRuleEndpoints in the indexer.
func (s *streamRuleEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.StreamRuleEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StreamRuleEndpoint))
	})
	return ret, err
}

// StreamRuleEndpoints returns an object that can list and get StreamRuleEndpoints.
func (s *streamRuleEndpointLister) StreamRuleEndpoints(namespace string) StreamRuleEndpointNamespaceLister {
	return streamRuleEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StreamRuleEndpointNamespaceLister helps list and get StreamRuleEndpoints.
// All objects returned here must be treated as read-only.
type StreamRuleEndpointNamespaceLister interface {
	// List lists all StreamRuleEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StreamRuleEndpoint, err error)
	// Get retrieves the StreamRuleEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StreamRuleEndpoint, error)
	StreamRuleEndpointNamespaceListerExpansion
}

// streamRuleEndpointNamespaceLister implements the StreamRuleEndpointNamespaceLister
// interface.
type streamRuleEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StreamRuleEndpoints in the indexer for a given namespace.
func (s streamRuleEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StreamRuleEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StreamRuleEndpoint))
	})
	return ret, err
}

// Get retrieves the StreamRuleEndpoint from the indexer for a given namespace and name.
func (s streamRuleEndpointNamespaceLister) Get(name string) (*v1alpha1.StreamRuleEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("streamruleendpoint"), name)
	}
	return obj.(*v1alpha1.StreamRuleEndpoint), nil
}
