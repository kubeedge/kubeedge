/*
Copyright 2022 The KubeEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// To regenerate api.pb.go run hack/generate-dmi.sh
syntax = "proto3";

//option go_package = "path;name";
option go_package="./;v1alpha1";
package v1alpha1;

import "google/protobuf/any.proto";

// DeviceManagerService defines the public APIS for remote device management.
// The server is implemented by the module of device manager in edgecore
// and the client is implemented by the device mapper for upstreaming.
// The mapper should register itself to the device manager when it is online
// to get the list of devices. And then the mapper can report the device status to the device manager.
service DeviceManagerService {
    // MapperRegister registers the information of the mapper to device manager
    // when the mapper is online. Device manager returns the list of devices and device models which
    // this mapper should manage.
    rpc MapperRegister(MapperRegisterRequest) returns (MapperRegisterResponse) {}
    // ReportDeviceStatus reports the status of devices to device manager.
    // When the mapper collects some properties of a device, it can make them a map of device twins
    // and report it to the device manager through the interface of ReportDeviceStatus.
    rpc ReportDeviceStatus(ReportDeviceStatusRequest) returns (ReportDeviceStatusResponse) {}
}

// DeviceMapperService defines the public APIS for remote device management.
// The server is implemented by the device mapper
// and the client is implemented by the module of device manager in edgecore for downstreaming.
// The device manager can manage the device life cycle through these interfaces provided by DeviceMapperService.
// When device manager gets a message of device management from cloudcore, it should call the corresponding grpc interface
// to make the mapper maintain the list of device information.
service DeviceMapperService {
    // RegisterDevice registers a device to the device mapper.
    // Device manager registers a device instance with the information of device
    // to the mapper through the interface of RegisterDevice.
    // When the mapper gets the request of register with device information,
    // it should add the device to the device list and connect to the real physical device via the specific protocol.
    rpc RegisterDevice(RegisterDeviceRequest) returns (RegisterDeviceResponse) {}
    // RemoveDevice unregisters a device to the device mapper.
    // Device manager unregisters a device instance with the name of device
    // to the mapper through the interface of RemoveDevice.
    // When the mapper gets the request of unregister with device name,
    // it should remove the device from the device list and disconnect to the real physical device.
    rpc RemoveDevice(RemoveDeviceRequest) returns (RemoveDeviceResponse) {}
    // UpdateDevice updates a device to the device mapper
    // Device manager updates the information of a device used by the mapper
    // through the interface of UpdateDevice.
    // The information of a device includes the meta data and the status data of a device.
    // When the mapper gets the request of updating with the information of a device,
    // it should update the device of the device list and connect to the real physical device via the updated information.
    rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse) {}
    // CreateDeviceModel creates a device model to the device mapper.
    // Device manager sends the information of device model to the mapper
    // through the interface of CreateDeviceModel.
    // When the mapper gets the request of creating with the information of device model,
    // it should create a new device model to the list of device models.
    rpc CreateDeviceModel(CreateDeviceModelRequest) returns (CreateDeviceModelResponse) {}
    // RemoveDeviceModel remove a device model to the device mapper.
    // Device manager sends the name of device model to the mapper
    // through the interface of RemoveDeviceModel.
    // When the mapper gets the request of removing with the name of device model,
    // it should remove the device model to the list of device models.
    rpc RemoveDeviceModel(RemoveDeviceModelRequest) returns (RemoveDeviceModelResponse) {}
    // UpdateDeviceModel update a device model to the device mapper.
    // Device manager sends the information of device model to the mapper
    // through the interface of UpdateDeviceModel.
    // When the mapper gets the request of updating with the information of device model,
    // it should update the device model to the list of device models.
    rpc UpdateDeviceModel(UpdateDeviceModelRequest) returns (UpdateDeviceModelResponse) {}
    // UpdateDeviceStatus update a device status to the device mapper
    // Device manager sends the new device status to the mapper
    // through the interface of UpdateDeviceStatus.
    // The device status represents the properties of device twins.
    // When the mapper gets the request of updating with the new device status,
    // it should update the device status of the device list and the real device status of the physical device via the updated information.
    rpc UpdateDeviceStatus(UpdateDeviceStatusRequest) returns (UpdateDeviceStatusResponse) {}
    // GetDevice get the information of a device from the device mapper.
    // Device sends the request of querying device information with the device name to the mapper
    // through the interface of GetDevice.
    // When the mapper gets the request of querying with the device name,
    // it should return the device information.
    rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse) {}
}

message MapperRegisterRequest {
  // The flag to show how device manager returns.
  // True means device manager should return the device list in the response.
  // False means device manager should just return nothing.
  bool withData = 1;
  // Mapper information to be registered to the device manager.
  MapperInfo mapper = 2;
}

message MapperRegisterResponse {
    // List of device models which the mapper maintains.
    repeated DeviceModel modelList = 1;
    // List of devices which the mapper maintains.
    repeated Device deviceList = 2;
}
// DeviceModel specifies the information of a device model.
message DeviceModel {
    // Name of a device model.
    string name = 1;
    // Specification of a device model.
    DeviceModelSpec spec = 2;
}

// DeviceModelSpec is the specification of a device model.
message DeviceModelSpec {
    // The properties provided by the device of this device model.
    repeated DeviceProperty properties = 1;
    // The commands executed by the device of this device model.
    repeated DeviceCommand commands = 2;
    // The protocol name used by the device of this device model.
    string protocol = 3;
}

// DeviceProperty is the property of a device.
message DeviceProperty {
    // The name of this property.
    string name = 1;
    // The description of this property.
    string description = 2;
    // The specific type of this property.
    PropertyType type = 3;
}

// PropertyType is the type of a property.
message PropertyType {
    // Property of Type Int64.
    PropertyTypeInt64 int = 1;
    // Property of Type String.
    PropertyTypeString string = 2;
    // Property of Type Double.
    PropertyTypeDouble double = 3;
    // Property of Type Float.
    PropertyTypeFloat float = 4;
    // Property of Type Boolean.
    PropertyTypeBoolean boolean = 5;
    // Property of Type Bytes.
    PropertyTypeBytes bytes = 6;
}

// The Specification of property of Int64.
message PropertyTypeInt64 {
    // The access mode of this property, ReadOnly or ReadWrite.
    string accessMode = 1;
    // The default value of this property.
    int64 defaultValue =2;
    // The minimum value of this property.
    int64 minimum =3;
    // The maximum value of this property.
    int64 maximum = 4;
    // The unit of this property.
    string unit = 5;
}

// The Specification of property of String.
message PropertyTypeString {
    // The access mode of this property, ReadOnly or ReadWrite.
    string accessMode = 1;
    // The default value of this property.
    string defaultValue = 2;
}

// The Specification of property of Double.
message PropertyTypeDouble {
    // The access mode of this property, ReadOnly or ReadWrite.
    string accessMode = 1;
    // The default value of this property.
    double defaultValue = 2;
    // The minimum value of this property.
    double minimum = 3;
    // The maximum value of this property.
    double maximum = 4;
    // The unit of this property.
    string unit = 5;
}

// The Specification of property of Float.
message PropertyTypeFloat {
    // The access mode of this property, ReadOnly or ReadWrite.
    string accessMode = 1;
    // The default value of this property.
    float defaultValue = 2;
    // The minimum value of this property.
    float minimum = 3;
    // The maximum value of this property.
    float maximum = 4;
    // The unit of this property.
    string unit = 5;
}

// The Specification of property of Boolean.
message PropertyTypeBoolean {
    // The access mode of this property, ReadOnly or ReadWrite.
    string accessMode = 1;
    // The default value of this property.
    bool defaultValue = 2;
}

// The Specification of property of Bytes.
message PropertyTypeBytes {
    // The access mode of this property, ReadOnly or ReadWrite.
    string accessMode = 1;
}

// DeviceCommond is the description of a command which the device supports.
message DeviceCommand {
    // Name of the command.
    string name = 1;
    // Url of the command to access.
    string url = 2;
    // Method of the command.
    string method = 3;
    // Status code list which the command can return.
    repeated string status_code = 4;
    // Parameter list which the command carries.
    repeated string parameters = 5;
    // Response examples of the command.
    bytes response = 6;
}

// Device is the description of a device instance.
message Device {
    // Name of the device.
    string name = 1;
    // Specification of the device.
    DeviceSpec spec = 2;
    // Status of the device.
    DeviceStatus status = 3;
}

// DeviceSpec is the specification of the device.
message DeviceSpec {
    // The device model which the device references.
    string deviceModelReference = 1;
    // The specific config of the protocol to access to the device.
    ProtocolConfig protocol = 2;
    // The visitor to collect the properties of the device.
    repeated DevicePropertyVisitor propertyVisitors = 3;
}

// ProtocolConfig is the specific config of the protocol to access to the device.
message ProtocolConfig {
    // The specific config of the protocol of OpcUA.
    ProtocolConfigOpcUA opcua = 1;
    // The specific config of the protocol of Modbus.
    ProtocolConfigModbus modbus = 2;
    // The specific config of the protocol of Bluetooth.
    ProtocolConfigBluetooth bluetooth = 3;
    // The common config for device.
    ProtocolConfigCommon common = 4;
    // The specific config of the customized protocol.
    ProtocolConfigCustomized customizedProtocol = 5;
}

// ProtocolConfigOpcUA is the config of the protocol of OpcUA.
message ProtocolConfigOpcUA {
    // URL of the device.
    string url = 1;
    // The user name to access to the device.
    string userName = 2;
    // The file path to store the password to access to the device like /ca/paas.
    string password = 3;
    // The security policy of the device like Basic256Sha256.
    string securityPolicy = 4;
    // The security mode of the device like Sign.
    string securityMode = 5;
    // The file path to store the certificate to access to the device like /ca/clientcert.pem.
    string certificate = 6;
    // The file path to store the private key to access to the device like /ca/clientkey.pem.
    string privateKey = 7;
    int64 timeout = 8;
}

// ProtocolConfigModbus is the config of the protocol of Modbus.
message ProtocolConfigModbus {
    // The ID of the slave.
    int64 slaveID = 1;
}
// The specific config of the protocol of Bluetooth.
message ProtocolConfigBluetooth {
    // The mac address of the bluetooth device.
    string macAddress = 1;
}

// The common config for device.
message ProtocolConfigCommon {
    // ProtocolConfigCOM is the config of com.
    ProtocolConfigCOM com = 1;
    // ProtocolConfigTCP is the config of tcp.
    ProtocolConfigTCP tcp = 2;
    // commType is the type of the communication.
    string commType = 3;
    // reconnTimeout is the time out of reconnection.
    int64 reconnTimeout = 4;
    // reconnRetryTimes is the retry times of reconnection.
    int64 reconnRetryTimes = 5;
    // collectTimeout is the time out of collection.
    int64 collectTimeout = 6;
    // collectRetryTimes is the retry times of collection.
    int64 collectRetryTimes = 7;
    // collectType is the type of collection.
    string collectType = 8;
    // CustomizedValue is the customized value for developers.
    CustomizedValue customizedValues = 9;
}

// ProtocolConfigCOM is the config of com.
message ProtocolConfigCOM {
    // serialPort is the port of serial.
    string serialPort = 1;
    // baudRate is the rate of baud.
    int64 baudRate = 2;
    // dataBits is the bits of data.
    int64 dataBits= 3;
    // parity is the bit of parity.
    string parity = 4;
    // stopBits is the bit of stop.
    int64 stopBits = 5;
}

// ProtocolConfigTCP is the config of tcp.
message ProtocolConfigTCP {
    // IP of tcp for the device.
    string ip = 1;
    // port of tcp for the device.
    int64 port = 2;
}

// CustomizedValue is the customized value for developers.
message CustomizedValue {
    // data is the customized value and it can be any form.
    map<string, google.protobuf.Any> data = 1;
}

// The specific config of the customized protocol.
message ProtocolConfigCustomized {
    // the name of the customized protocol.
    string protocolName = 1;
    // the config data of the customized protocol.
    CustomizedValue configData = 2;
}

// The visitor to collect the properties of the device.
message DevicePropertyVisitor {
    // the name of the property.
    string propertyName = 1;
    // the cycle to report data.
    int64 reportCycle = 2;
    // the cycle to collect data.
    int64 collectCycle = 3;
    // CustomizedValue is the customized value for developers.
    CustomizedValue customizedValues = 4;
    // the visitor to collect the properties of the device of OPC UA.
    VisitorConfigOPCUA opcua = 5;
    // the visitor to collect the properties of the device of Modbus.
    VisitorConfigModbus modbus = 6;
    // the visitor to collect the properties of the device of Bluetooth.
    VisitorConfigBluetooth bluetooth = 7;
    // the visitor to collect the properties of the device of customized protocol.
    VisitorConfigCustomized customizedProtocol = 8;
}

// the visitor to collect the properties of the device of OPC UA.
message VisitorConfigOPCUA {
    // ID of the node.
    string nodeID = 1;
    // name of browse.
    string browseName = 2;
}

// the visitor to collect the properties of the device of Modbus.
message VisitorConfigModbus {
    // register of Modbus
    string register =1;
    // offset of Modbus.
    int64 offset = 2;
    // limit of Modbus.
    int64 limit = 3;
    // scale of Modbus.
    double scale = 4;
    // isSwap of Modbus.
    bool isSwap = 5;
    // isRegisterSwap of Modbus.
    bool isRegisterSwap = 6;
}

// the visitor to collect the properties of the device of Bluetooth.
message VisitorConfigBluetooth {
    // characteristicUUID of Bluetooth.
    string characteristicUUID = 1;
    // dataWrite of Bluetooth.
    map<string, bytes> dataWrite = 2;
    // BluetoothReadConverter of Bluetooth.
    BluetoothReadConverter dataConverter =3;
}

// BluetoothReadConverter of Bluetooth.
message BluetoothReadConverter {
    int64 startIndex = 1;
    int64 endIndex = 2;
    uint64 shiftLeft = 3;
    uint64 shiftRight = 4;
    repeated BluetoothOperations orderOfOperations =5;
}

// BluetoothOperations of Bluetooth.
message BluetoothOperations {
    string operationType = 1;
    double operationValue = 2;
}

// the visitor to collect the properties of the device of customized protocol.
message VisitorConfigCustomized {
    string protocolName = 1;
    CustomizedValue configData =2;
}

// MapperInfo is the information of mapper.
message MapperInfo {
    // name of the mapper.
    string name = 1;
    // version of the mapper.
    string version = 2;
    // api version of the mapper.
    string api_version = 3;
    // the protocol of the mapper.
    string protocol = 4;
    // the address of the mapper. it is a unix domain socket of grpc.
    bytes address = 5;
    // the state of the mapper.
    string state = 6;
}

message ReportDeviceStatusRequest {
    string deviceName = 1;
    DeviceStatus reportedDevice = 2;
}

// DeviceStatus is the status of the device.
message DeviceStatus {
    // the device twins of the device.
    repeated Twin twins = 1;
    // the state of the device like Online or Offline.
    string state = 2;
}

// Twin is the digital model of a device. It contains a series of properties.
message Twin {
    // the name of the property.
    string propertyName = 1;
    // the desired value of the property configured by device manager.
    TwinProperty desired = 2;
    // the reported value of the property from the real device.
    TwinProperty reported = 3;
}

// TwinProperty is the specification of the property.
message TwinProperty {
    // the value of the property.
    string value = 1;
    // the metadata to describe this property.
    map<string,string> metadata = 2;
}

message ReportDeviceStatusResponse {}

message RegisterDeviceRequest {
  Device device = 1;
}

message RegisterDeviceResponse {
    string deviceName = 1;
}

message CreateDeviceModelRequest {
  DeviceModel model = 1;
}

message CreateDeviceModelResponse {
    string deviceModelName = 1;
}

message RemoveDeviceRequest {
    string deviceName =1;
}

message RemoveDeviceResponse {}

message RemoveDeviceModelRequest {
    string modelName =1;
}

message RemoveDeviceModelResponse {}

message UpdateDeviceRequest {
    Device device = 1;
}

message UpdateDeviceResponse {}

message UpdateDeviceModelRequest {
    DeviceModel model = 1;
}

message UpdateDeviceModelResponse {}

message UpdateDeviceStatusRequest {
    string deviceName = 1;
    DeviceStatus desiredDevice = 2;
}

message UpdateDeviceStatusResponse {}

message GetDeviceRequest {
    string deviceName = 1;
}

message GetDeviceResponse {
    Device device = 1;
}
