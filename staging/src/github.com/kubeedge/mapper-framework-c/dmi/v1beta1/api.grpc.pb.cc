// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace v1beta1 {

static const char* DeviceManagerService_method_names[] = {
  "/v1beta1.DeviceManagerService/MapperRegister",
  "/v1beta1.DeviceManagerService/ReportDeviceStatus",
  "/v1beta1.DeviceManagerService/ReportDeviceStates",
};

std::unique_ptr< DeviceManagerService::Stub> DeviceManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceManagerService::Stub> stub(new DeviceManagerService::Stub(channel, options));
  return stub;
}

DeviceManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MapperRegister_(DeviceManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportDeviceStatus_(DeviceManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportDeviceStates_(DeviceManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceManagerService::Stub::MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::v1beta1::MapperRegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MapperRegister_, context, request, response);
}

void DeviceManagerService::Stub::async::MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MapperRegister_, context, request, response, std::move(f));
}

void DeviceManagerService::Stub::async::MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MapperRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>* DeviceManagerService::Stub::PrepareAsyncMapperRegisterRaw(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::MapperRegisterResponse, ::v1beta1::MapperRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MapperRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>* DeviceManagerService::Stub::AsyncMapperRegisterRaw(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMapperRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceManagerService::Stub::ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::v1beta1::ReportDeviceStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportDeviceStatus_, context, request, response);
}

void DeviceManagerService::Stub::async::ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDeviceStatus_, context, request, response, std::move(f));
}

void DeviceManagerService::Stub::async::ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDeviceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>* DeviceManagerService::Stub::PrepareAsyncReportDeviceStatusRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::ReportDeviceStatusResponse, ::v1beta1::ReportDeviceStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportDeviceStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>* DeviceManagerService::Stub::AsyncReportDeviceStatusRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportDeviceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceManagerService::Stub::ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::v1beta1::ReportDeviceStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportDeviceStates_, context, request, response);
}

void DeviceManagerService::Stub::async::ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDeviceStates_, context, request, response, std::move(f));
}

void DeviceManagerService::Stub::async::ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDeviceStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>* DeviceManagerService::Stub::PrepareAsyncReportDeviceStatesRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::ReportDeviceStatesResponse, ::v1beta1::ReportDeviceStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportDeviceStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>* DeviceManagerService::Stub::AsyncReportDeviceStatesRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportDeviceStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManagerService::Service, ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::MapperRegisterRequest* req,
             ::v1beta1::MapperRegisterResponse* resp) {
               return service->MapperRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManagerService::Service, ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::ReportDeviceStatusRequest* req,
             ::v1beta1::ReportDeviceStatusResponse* resp) {
               return service->ReportDeviceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceManagerService::Service, ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::ReportDeviceStatesRequest* req,
             ::v1beta1::ReportDeviceStatesResponse* resp) {
               return service->ReportDeviceStates(ctx, req, resp);
             }, this)));
}

DeviceManagerService::Service::~Service() {
}

::grpc::Status DeviceManagerService::Service::MapperRegister(::grpc::ServerContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManagerService::Service::ReportDeviceStatus(::grpc::ServerContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceManagerService::Service::ReportDeviceStates(::grpc::ServerContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DeviceMapperService_method_names[] = {
  "/v1beta1.DeviceMapperService/RegisterDevice",
  "/v1beta1.DeviceMapperService/RemoveDevice",
  "/v1beta1.DeviceMapperService/UpdateDevice",
  "/v1beta1.DeviceMapperService/CreateDeviceModel",
  "/v1beta1.DeviceMapperService/RemoveDeviceModel",
  "/v1beta1.DeviceMapperService/UpdateDeviceModel",
  "/v1beta1.DeviceMapperService/GetDevice",
};

std::unique_ptr< DeviceMapperService::Stub> DeviceMapperService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceMapperService::Stub> stub(new DeviceMapperService::Stub(channel, options));
  return stub;
}

DeviceMapperService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterDevice_(DeviceMapperService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveDevice_(DeviceMapperService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevice_(DeviceMapperService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDeviceModel_(DeviceMapperService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveDeviceModel_(DeviceMapperService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDeviceModel_(DeviceMapperService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevice_(DeviceMapperService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceMapperService::Stub::RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::v1beta1::RegisterDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterDevice_, context, request, response);
}

void DeviceMapperService::Stub::async::RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDevice_, context, request, response, std::move(f));
}

void DeviceMapperService::Stub::async::RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>* DeviceMapperService::Stub::PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::RegisterDeviceResponse, ::v1beta1::RegisterDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>* DeviceMapperService::Stub::AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceMapperService::Stub::RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::v1beta1::RemoveDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveDevice_, context, request, response);
}

void DeviceMapperService::Stub::async::RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDevice_, context, request, response, std::move(f));
}

void DeviceMapperService::Stub::async::RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>* DeviceMapperService::Stub::PrepareAsyncRemoveDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::RemoveDeviceResponse, ::v1beta1::RemoveDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>* DeviceMapperService::Stub::AsyncRemoveDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceMapperService::Stub::UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::v1beta1::UpdateDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDevice_, context, request, response);
}

void DeviceMapperService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, std::move(f));
}

void DeviceMapperService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>* DeviceMapperService::Stub::PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::UpdateDeviceResponse, ::v1beta1::UpdateDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>* DeviceMapperService::Stub::AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceMapperService::Stub::CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::v1beta1::CreateDeviceModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDeviceModel_, context, request, response);
}

void DeviceMapperService::Stub::async::CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDeviceModel_, context, request, response, std::move(f));
}

void DeviceMapperService::Stub::async::CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDeviceModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>* DeviceMapperService::Stub::PrepareAsyncCreateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::CreateDeviceModelResponse, ::v1beta1::CreateDeviceModelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDeviceModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>* DeviceMapperService::Stub::AsyncCreateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDeviceModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceMapperService::Stub::RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::v1beta1::RemoveDeviceModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveDeviceModel_, context, request, response);
}

void DeviceMapperService::Stub::async::RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDeviceModel_, context, request, response, std::move(f));
}

void DeviceMapperService::Stub::async::RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveDeviceModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>* DeviceMapperService::Stub::PrepareAsyncRemoveDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::RemoveDeviceModelResponse, ::v1beta1::RemoveDeviceModelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveDeviceModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>* DeviceMapperService::Stub::AsyncRemoveDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveDeviceModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceMapperService::Stub::UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::v1beta1::UpdateDeviceModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDeviceModel_, context, request, response);
}

void DeviceMapperService::Stub::async::UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDeviceModel_, context, request, response, std::move(f));
}

void DeviceMapperService::Stub::async::UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDeviceModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>* DeviceMapperService::Stub::PrepareAsyncUpdateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::UpdateDeviceModelResponse, ::v1beta1::UpdateDeviceModelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDeviceModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>* DeviceMapperService::Stub::AsyncUpdateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeviceModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceMapperService::Stub::GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::v1beta1::GetDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevice_, context, request, response);
}

void DeviceMapperService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, std::move(f));
}

void DeviceMapperService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>* DeviceMapperService::Stub::PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::v1beta1::GetDeviceResponse, ::v1beta1::GetDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>* DeviceMapperService::Stub::AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceMapperService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceMapperService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceMapperService::Service, ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::RegisterDeviceRequest* req,
             ::v1beta1::RegisterDeviceResponse* resp) {
               return service->RegisterDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceMapperService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceMapperService::Service, ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::RemoveDeviceRequest* req,
             ::v1beta1::RemoveDeviceResponse* resp) {
               return service->RemoveDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceMapperService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceMapperService::Service, ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::UpdateDeviceRequest* req,
             ::v1beta1::UpdateDeviceResponse* resp) {
               return service->UpdateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceMapperService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceMapperService::Service, ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::CreateDeviceModelRequest* req,
             ::v1beta1::CreateDeviceModelResponse* resp) {
               return service->CreateDeviceModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceMapperService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceMapperService::Service, ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::RemoveDeviceModelRequest* req,
             ::v1beta1::RemoveDeviceModelResponse* resp) {
               return service->RemoveDeviceModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceMapperService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceMapperService::Service, ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::UpdateDeviceModelRequest* req,
             ::v1beta1::UpdateDeviceModelResponse* resp) {
               return service->UpdateDeviceModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceMapperService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceMapperService::Service, ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::v1beta1::GetDeviceRequest* req,
             ::v1beta1::GetDeviceResponse* resp) {
               return service->GetDevice(ctx, req, resp);
             }, this)));
}

DeviceMapperService::Service::~Service() {
}

::grpc::Status DeviceMapperService::Service::RegisterDevice(::grpc::ServerContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceMapperService::Service::RemoveDevice(::grpc::ServerContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceMapperService::Service::UpdateDevice(::grpc::ServerContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceMapperService::Service::CreateDeviceModel(::grpc::ServerContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceMapperService::Service::RemoveDeviceModel(::grpc::ServerContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceMapperService::Service::UpdateDeviceModel(::grpc::ServerContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceMapperService::Service::GetDevice(::grpc::ServerContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace v1beta1
#include <grpcpp/ports_undef.inc>

