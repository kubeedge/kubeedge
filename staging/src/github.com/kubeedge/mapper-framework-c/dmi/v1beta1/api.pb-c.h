/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api.proto */

#ifndef PROTOBUF_C_api_2eproto__INCLUDED
#define PROTOBUF_C_api_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "google/protobuf/any.pb-c.h"

typedef struct V1beta1__MapperRegisterRequest V1beta1__MapperRegisterRequest;
typedef struct V1beta1__MapperRegisterResponse V1beta1__MapperRegisterResponse;
typedef struct V1beta1__DeviceModel V1beta1__DeviceModel;
typedef struct V1beta1__DeviceModelSpec V1beta1__DeviceModelSpec;
typedef struct V1beta1__ModelProperty V1beta1__ModelProperty;
typedef struct V1beta1__DeviceCommand V1beta1__DeviceCommand;
typedef struct V1beta1__Device V1beta1__Device;
typedef struct V1beta1__DeviceSpec V1beta1__DeviceSpec;
typedef struct V1beta1__DeviceMethod V1beta1__DeviceMethod;
typedef struct V1beta1__DeviceProperty V1beta1__DeviceProperty;
typedef struct V1beta1__ProtocolConfig V1beta1__ProtocolConfig;
typedef struct V1beta1__VisitorConfig V1beta1__VisitorConfig;
typedef struct V1beta1__CustomizedValue V1beta1__CustomizedValue;
typedef struct V1beta1__CustomizedValue__DataEntry V1beta1__CustomizedValue__DataEntry;
typedef struct V1beta1__PushMethod V1beta1__PushMethod;
typedef struct V1beta1__PushMethodHTTP V1beta1__PushMethodHTTP;
typedef struct V1beta1__PushMethodMQTT V1beta1__PushMethodMQTT;
typedef struct V1beta1__PushMethodOTEL V1beta1__PushMethodOTEL;
typedef struct V1beta1__DBMethod V1beta1__DBMethod;
typedef struct V1beta1__DBMethodInfluxdb2 V1beta1__DBMethodInfluxdb2;
typedef struct V1beta1__Influxdb2DataConfig V1beta1__Influxdb2DataConfig;
typedef struct V1beta1__Influxdb2DataConfig__TagEntry V1beta1__Influxdb2DataConfig__TagEntry;
typedef struct V1beta1__Influxdb2ClientConfig V1beta1__Influxdb2ClientConfig;
typedef struct V1beta1__DBMethodRedis V1beta1__DBMethodRedis;
typedef struct V1beta1__RedisClientConfig V1beta1__RedisClientConfig;
typedef struct V1beta1__DBMethodTDEngine V1beta1__DBMethodTDEngine;
typedef struct V1beta1__TDEngineClientConfig V1beta1__TDEngineClientConfig;
typedef struct V1beta1__DBMethodMySQL V1beta1__DBMethodMySQL;
typedef struct V1beta1__MySQLClientConfig V1beta1__MySQLClientConfig;
typedef struct V1beta1__DBMethodOTEL V1beta1__DBMethodOTEL;
typedef struct V1beta1__OTELExporterConfig V1beta1__OTELExporterConfig;
typedef struct V1beta1__MapperInfo V1beta1__MapperInfo;
typedef struct V1beta1__ReportDeviceStatusRequest V1beta1__ReportDeviceStatusRequest;
typedef struct V1beta1__ReportDeviceStatesRequest V1beta1__ReportDeviceStatesRequest;
typedef struct V1beta1__DeviceStatus V1beta1__DeviceStatus;
typedef struct V1beta1__Twin V1beta1__Twin;
typedef struct V1beta1__TwinProperty V1beta1__TwinProperty;
typedef struct V1beta1__TwinProperty__MetadataEntry V1beta1__TwinProperty__MetadataEntry;
typedef struct V1beta1__ReportDeviceStatusResponse V1beta1__ReportDeviceStatusResponse;
typedef struct V1beta1__ReportDeviceStatesResponse V1beta1__ReportDeviceStatesResponse;
typedef struct V1beta1__RegisterDeviceRequest V1beta1__RegisterDeviceRequest;
typedef struct V1beta1__RegisterDeviceResponse V1beta1__RegisterDeviceResponse;
typedef struct V1beta1__CreateDeviceModelRequest V1beta1__CreateDeviceModelRequest;
typedef struct V1beta1__CreateDeviceModelResponse V1beta1__CreateDeviceModelResponse;
typedef struct V1beta1__RemoveDeviceRequest V1beta1__RemoveDeviceRequest;
typedef struct V1beta1__RemoveDeviceResponse V1beta1__RemoveDeviceResponse;
typedef struct V1beta1__RemoveDeviceModelRequest V1beta1__RemoveDeviceModelRequest;
typedef struct V1beta1__RemoveDeviceModelResponse V1beta1__RemoveDeviceModelResponse;
typedef struct V1beta1__UpdateDeviceRequest V1beta1__UpdateDeviceRequest;
typedef struct V1beta1__UpdateDeviceResponse V1beta1__UpdateDeviceResponse;
typedef struct V1beta1__UpdateDeviceModelRequest V1beta1__UpdateDeviceModelRequest;
typedef struct V1beta1__UpdateDeviceModelResponse V1beta1__UpdateDeviceModelResponse;
typedef struct V1beta1__GetDeviceRequest V1beta1__GetDeviceRequest;
typedef struct V1beta1__GetDeviceResponse V1beta1__GetDeviceResponse;


/* --- enums --- */


/* --- messages --- */

struct  V1beta1__MapperRegisterRequest
{
  ProtobufCMessage base;
  /*
   * The flag to show how device manager returns.
   * True means device manager should return the device list in the response.
   * False means device manager should just return nothing.
   */
  protobuf_c_boolean withdata;
  /*
   * Mapper information to be registered to the device manager.
   */
  V1beta1__MapperInfo *mapper;
};
#define V1BETA1__MAPPER_REGISTER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__mapper_register_request__descriptor) \
, 0, NULL }


struct  V1beta1__MapperRegisterResponse
{
  ProtobufCMessage base;
  /*
   * List of device models which the mapper maintains.
   */
  size_t n_modellist;
  V1beta1__DeviceModel **modellist;
  /*
   * List of devices which the mapper maintains.
   */
  size_t n_devicelist;
  V1beta1__Device **devicelist;
};
#define V1BETA1__MAPPER_REGISTER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__mapper_register_response__descriptor) \
, 0,NULL, 0,NULL }


/*
 * DeviceModel specifies the information of a device model.
 */
struct  V1beta1__DeviceModel
{
  ProtobufCMessage base;
  /*
   * Name of a device model.
   */
  char *name;
  /*
   * Specification of a device model.
   */
  V1beta1__DeviceModelSpec *spec;
  /*
   * Namespace of the device model.
   */
  char *namespace_;
};
#define V1BETA1__DEVICE_MODEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device_model__descriptor) \
, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string }


/*
 * DeviceModelSpec is the specification of a device model.
 */
struct  V1beta1__DeviceModelSpec
{
  ProtobufCMessage base;
  /*
   * The properties provided by the device of this device model.
   */
  size_t n_properties;
  V1beta1__ModelProperty **properties;
  /*
   * The commands executed by the device of this device model.
   */
  size_t n_commands;
  V1beta1__DeviceCommand **commands;
};
#define V1BETA1__DEVICE_MODEL_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device_model_spec__descriptor) \
, 0,NULL, 0,NULL }


/*
 * ModelProperty is the property of a device.
 */
struct  V1beta1__ModelProperty
{
  ProtobufCMessage base;
  /*
   * The name of this property.
   */
  char *name;
  /*
   * The description of this property.
   */
  char *description;
  /*
   * The specific type of this property.
   */
  char *type;
  /*
   * The access mode of this property, ReadOnly or ReadWrite.
   */
  char *accessmode;
  /*
   * The minimum value of this property.
   */
  char *minimum;
  /*
   * The maximum value of this property.
   */
  char *maximum;
  /*
   * The unit of this property.
   */
  char *unit;
};
#define V1BETA1__MODEL_PROPERTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__model_property__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * DeviceCommond is the description of a command which the device supports.
 */
struct  V1beta1__DeviceCommand
{
  ProtobufCMessage base;
  /*
   * Name of the command.
   */
  char *name;
  /*
   * Url of the command to access.
   */
  char *url;
  /*
   * Method of the command.
   */
  char *method;
  /*
   * Status code list which the command can return.
   */
  size_t n_status_code;
  char **status_code;
  /*
   * Parameter list which the command carries.
   */
  size_t n_parameters;
  char **parameters;
  /*
   * Response examples of the command.
   */
  ProtobufCBinaryData response;
};
#define V1BETA1__DEVICE_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device_command__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, {0,NULL} }


/*
 * Device is the description of a device instance.
 */
struct  V1beta1__Device
{
  ProtobufCMessage base;
  /*
   * Name of the device.
   */
  char *name;
  /*
   * Specification of the device.
   */
  V1beta1__DeviceSpec *spec;
  /*
   * Status of the device.
   */
  V1beta1__DeviceStatus *status;
  /*
   * Namespace of the device.
   */
  char *namespace_;
};
#define V1BETA1__DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL, (char *)protobuf_c_empty_string }


/*
 * DeviceSpec is the specification of the device.
 */
struct  V1beta1__DeviceSpec
{
  ProtobufCMessage base;
  /*
   * The device model which the device references.
   */
  char *devicemodelreference;
  /*
   * The specific config of the protocol to access to the device.
   */
  V1beta1__ProtocolConfig *protocol;
  /*
   * List of properties which describe the device properties.
   */
  size_t n_properties;
  V1beta1__DeviceProperty **properties;
  /*
   * List of methods which describe the device methods.
   */
  size_t n_methods;
  V1beta1__DeviceMethod **methods;
};
#define V1BETA1__DEVICE_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device_spec__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0,NULL }


/*
 * DeviceMethod describes the specifics all the methods of the device.
 */
struct  V1beta1__DeviceMethod
{
  ProtobufCMessage base;
  /*
   * The device method name to be accessed. It must be unique.
   */
  char *name;
  /*
   * the description of the device method.
   */
  char *description;
  /*
   * the list of device properties that device methods can control.
   */
  size_t n_propertynames;
  char **propertynames;
};
#define V1BETA1__DEVICE_METHOD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device_method__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * DeviceProperty describes the specifics all the properties of the device.
 */
struct  V1beta1__DeviceProperty
{
  ProtobufCMessage base;
  /*
   * The device property name to be accessed. It must be unique.
   */
  char *name;
  /*
   * the desired value of the property configured by device manager.
   */
  V1beta1__TwinProperty *desired;
  /*
   * Visitors are intended to be consumed by device mappers which connect to devices
   * and collect data / perform actions on the device.
   */
  V1beta1__VisitorConfig *visitors;
  /*
   * Define how frequent mapper will report the value.
   */
  int64_t reportcycle;
  /*
   * Define how frequent mapper will collect from device.
   */
  int64_t collectcycle;
  /*
   * whether be reported to the cloud
   */
  protobuf_c_boolean reporttocloud;
  /*
   * PushMethod represents the protocol used to push data,
   */
  V1beta1__PushMethod *pushmethod;
};
#define V1BETA1__DEVICE_PROPERTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device_property__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL, 0, 0, 0, NULL }


/*
 * ProtocolConfig is the specific config of the protocol to access to the device.
 */
struct  V1beta1__ProtocolConfig
{
  ProtobufCMessage base;
  /*
   * the name of the customized protocol.
   */
  char *protocolname;
  /*
   * the config data of the customized protocol.
   */
  V1beta1__CustomizedValue *configdata;
};
#define V1BETA1__PROTOCOL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__protocol_config__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * the visitor to collect the properties of the device of customized protocol.
 */
struct  V1beta1__VisitorConfig
{
  ProtobufCMessage base;
  /*
   * the name of the customized protocol.
   */
  char *protocolname;
  /*
   * the config data of the customized protocol.
   */
  V1beta1__CustomizedValue *configdata;
};
#define V1BETA1__VISITOR_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__visitor_config__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


struct  V1beta1__CustomizedValue__DataEntry
{
  ProtobufCMessage base;
  char *key;
  Google__Protobuf__Any *value;
};
#define V1BETA1__CUSTOMIZED_VALUE__DATA_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__customized_value__data_entry__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * CustomizedValue is the customized value for developers.
 */
struct  V1beta1__CustomizedValue
{
  ProtobufCMessage base;
  /*
   * data is the customized value and it can be any form.
   */
  size_t n_data;
  V1beta1__CustomizedValue__DataEntry **data;
};
#define V1BETA1__CUSTOMIZED_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__customized_value__descriptor) \
, 0,NULL }


struct  V1beta1__PushMethod
{
  ProtobufCMessage base;
  V1beta1__PushMethodHTTP *http;
  V1beta1__PushMethodMQTT *mqtt;
  V1beta1__PushMethodOTEL *otel;
  V1beta1__DBMethod *dbmethod;
};
#define V1BETA1__PUSH_METHOD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__push_method__descriptor) \
, NULL, NULL, NULL, NULL }


struct  V1beta1__PushMethodHTTP
{
  ProtobufCMessage base;
  char *hostname;
  int64_t port;
  char *requestpath;
  int64_t timeout;
};
#define V1BETA1__PUSH_METHOD_HTTP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__push_method_http__descriptor) \
, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0 }


struct  V1beta1__PushMethodMQTT
{
  ProtobufCMessage base;
  /*
   * broker address, like mqtt://127.0.0.1:1883
   */
  char *address;
  /*
   * publish topic for mqtt
   */
  char *topic;
  /*
   * qos of mqtt publish param
   */
  int32_t qos;
  /*
   * Is the message retained
   */
  protobuf_c_boolean retained;
};
#define V1BETA1__PUSH_METHOD_MQTT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__push_method_mqtt__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  V1beta1__PushMethodOTEL
{
  ProtobufCMessage base;
  /*
   * the target endpoint URL the Exporter will connect to, like https://localhost:4318/v1/metrics
   */
  char *endpointurl;
};
#define V1BETA1__PUSH_METHOD_OTEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__push_method_otel__descriptor) \
, (char *)protobuf_c_empty_string }


struct  V1beta1__DBMethod
{
  ProtobufCMessage base;
  /*
   * the config of database .
   */
  V1beta1__DBMethodInfluxdb2 *influxdb2;
  V1beta1__DBMethodRedis *redis;
  V1beta1__DBMethodTDEngine *tdengine;
  V1beta1__DBMethodMySQL *mysql;
};
#define V1BETA1__DBMETHOD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__dbmethod__descriptor) \
, NULL, NULL, NULL, NULL }


struct  V1beta1__DBMethodInfluxdb2
{
  ProtobufCMessage base;
  /*
   * the config of influx database.
   */
  V1beta1__Influxdb2ClientConfig *influxdb2clientconfig;
  V1beta1__Influxdb2DataConfig *influxdb2dataconfig;
};
#define V1BETA1__DBMETHOD_INFLUXDB2__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__dbmethod_influxdb2__descriptor) \
, NULL, NULL }


struct  V1beta1__Influxdb2DataConfig__TagEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define V1BETA1__INFLUXDB2_DATA_CONFIG__TAG_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__influxdb2_data_config__tag_entry__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__Influxdb2DataConfig
{
  ProtobufCMessage base;
  /*
   * data config when push data to influx
   */
  char *measurement;
  size_t n_tag;
  V1beta1__Influxdb2DataConfig__TagEntry **tag;
  char *fieldkey;
};
#define V1BETA1__INFLUXDB2_DATA_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__influxdb2_data_config__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


struct  V1beta1__Influxdb2ClientConfig
{
  ProtobufCMessage base;
  /*
   * influx database url
   */
  char *url;
  /*
   * usr org in influx database
   */
  char *org;
  /*
   * usr bucket in influx database
   */
  char *bucket;
};
#define V1BETA1__INFLUXDB2_CLIENT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__influxdb2_client_config__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__DBMethodRedis
{
  ProtobufCMessage base;
  /*
   * data config when push data to redis
   */
  V1beta1__RedisClientConfig *redisclientconfig;
};
#define V1BETA1__DBMETHOD_REDIS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__dbmethod_redis__descriptor) \
, NULL }


struct  V1beta1__RedisClientConfig
{
  ProtobufCMessage base;
  /*
   * redis address
   */
  char *addr;
  /*
   * number of redis db
   */
  int32_t db;
  /*
   * number of redis poolsize
   */
  int32_t poolsize;
  /*
   * number of redis minidleconns
   */
  int32_t minidleconns;
};
#define V1BETA1__REDIS_CLIENT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__redis_client_config__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  V1beta1__DBMethodTDEngine
{
  ProtobufCMessage base;
  /*
   * data config when push data to tdengine
   */
  V1beta1__TDEngineClientConfig *tdengineclientconfig;
};
#define V1BETA1__DBMETHOD_TDENGINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__dbmethod_tdengine__descriptor) \
, NULL }


struct  V1beta1__TDEngineClientConfig
{
  ProtobufCMessage base;
  /*
   * tdengine address,like 127.0.0.1:6041
   */
  char *addr;
  /*
   * tdengine database name
   */
  char *dbname;
};
#define V1BETA1__TDENGINE_CLIENT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__tdengine_client_config__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__DBMethodMySQL
{
  ProtobufCMessage base;
  V1beta1__MySQLClientConfig *mysqlclientconfig;
};
#define V1BETA1__DBMETHOD_MY_SQL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__dbmethod_my_sql__descriptor) \
, NULL }


struct  V1beta1__MySQLClientConfig
{
  ProtobufCMessage base;
  /*
   *mysql address,like localhost:3306
   */
  char *addr;
  /*
   *database name
   */
  char *database;
  /*
   *user name
   */
  char *username;
};
#define V1BETA1__MY_SQLCLIENT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__my_sqlclient_config__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__DBMethodOTEL
{
  ProtobufCMessage base;
  V1beta1__OTELExporterConfig *otelexporterconfig;
};
#define V1BETA1__DBMETHOD_OTEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__dbmethod_otel__descriptor) \
, NULL }


struct  V1beta1__OTELExporterConfig
{
  ProtobufCMessage base;
  /*
   *the target endpoint URL the Exporter will connect to, like https://localhost:4318/v1/metrics
   */
  char *endpointurl;
};
#define V1BETA1__OTELEXPORTER_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__otelexporter_config__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * MapperInfo is the information of mapper.
 */
struct  V1beta1__MapperInfo
{
  ProtobufCMessage base;
  /*
   * name of the mapper.
   */
  char *name;
  /*
   * version of the mapper.
   */
  char *version;
  /*
   * api version of the mapper.
   */
  char *api_version;
  /*
   * the protocol of the mapper.
   */
  char *protocol;
  /*
   * the address of the mapper. it is a unix domain socket of grpc.
   */
  ProtobufCBinaryData address;
  /*
   * the state of the mapper.
   */
  char *state;
};
#define V1BETA1__MAPPER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__mapper_info__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, (char *)protobuf_c_empty_string }


struct  V1beta1__ReportDeviceStatusRequest
{
  ProtobufCMessage base;
  char *devicename;
  V1beta1__DeviceStatus *reporteddevice;
  char *devicenamespace;
};
#define V1BETA1__REPORT_DEVICE_STATUS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__report_device_status_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string }


struct  V1beta1__ReportDeviceStatesRequest
{
  ProtobufCMessage base;
  char *devicename;
  char *devicenamespace;
  char *state;
};
#define V1BETA1__REPORT_DEVICE_STATES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__report_device_states_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * DeviceStatus is the status of the device.
 */
struct  V1beta1__DeviceStatus
{
  ProtobufCMessage base;
  /*
   * the device twins of the device.
   */
  size_t n_twins;
  V1beta1__Twin **twins;
  /*
   * whether be reported to the cloud
   */
  protobuf_c_boolean reporttocloud;
  /*
   * Define how frequent mapper will report the value.
   */
  int64_t reportcycle;
};
#define V1BETA1__DEVICE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__device_status__descriptor) \
, 0,NULL, 0, 0 }


/*
 * Twin is the digital model of a device. It contains a series of properties.
 */
struct  V1beta1__Twin
{
  ProtobufCMessage base;
  /*
   * the name of the property.
   */
  char *propertyname;
  /*
   * the observedDesired value of the property configured by mapper.
   */
  V1beta1__TwinProperty *observeddesired;
  /*
   * the reported value of the property from the real device.
   */
  V1beta1__TwinProperty *reported;
};
#define V1BETA1__TWIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__twin__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL }


struct  V1beta1__TwinProperty__MetadataEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define V1BETA1__TWIN_PROPERTY__METADATA_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__twin_property__metadata_entry__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * TwinProperty is the specification of the property.
 */
struct  V1beta1__TwinProperty
{
  ProtobufCMessage base;
  /*
   * the value of the property.
   */
  char *value;
  /*
   * the metadata to describe this property.
   */
  size_t n_metadata;
  V1beta1__TwinProperty__MetadataEntry **metadata;
};
#define V1BETA1__TWIN_PROPERTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__twin_property__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


struct  V1beta1__ReportDeviceStatusResponse
{
  ProtobufCMessage base;
};
#define V1BETA1__REPORT_DEVICE_STATUS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__report_device_status_response__descriptor) \
 }


struct  V1beta1__ReportDeviceStatesResponse
{
  ProtobufCMessage base;
};
#define V1BETA1__REPORT_DEVICE_STATES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__report_device_states_response__descriptor) \
 }


struct  V1beta1__RegisterDeviceRequest
{
  ProtobufCMessage base;
  V1beta1__Device *device;
};
#define V1BETA1__REGISTER_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__register_device_request__descriptor) \
, NULL }


struct  V1beta1__RegisterDeviceResponse
{
  ProtobufCMessage base;
  char *devicename;
  char *devicenamespace;
};
#define V1BETA1__REGISTER_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__register_device_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__CreateDeviceModelRequest
{
  ProtobufCMessage base;
  V1beta1__DeviceModel *model;
};
#define V1BETA1__CREATE_DEVICE_MODEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__create_device_model_request__descriptor) \
, NULL }


struct  V1beta1__CreateDeviceModelResponse
{
  ProtobufCMessage base;
  char *devicemodelname;
  char *devicemodelnamespace;
};
#define V1BETA1__CREATE_DEVICE_MODEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__create_device_model_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__RemoveDeviceRequest
{
  ProtobufCMessage base;
  char *devicename;
  char *devicenamespace;
};
#define V1BETA1__REMOVE_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__remove_device_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__RemoveDeviceResponse
{
  ProtobufCMessage base;
};
#define V1BETA1__REMOVE_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__remove_device_response__descriptor) \
 }


struct  V1beta1__RemoveDeviceModelRequest
{
  ProtobufCMessage base;
  char *modelname;
  char *modelnamespace;
};
#define V1BETA1__REMOVE_DEVICE_MODEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__remove_device_model_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__RemoveDeviceModelResponse
{
  ProtobufCMessage base;
};
#define V1BETA1__REMOVE_DEVICE_MODEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__remove_device_model_response__descriptor) \
 }


struct  V1beta1__UpdateDeviceRequest
{
  ProtobufCMessage base;
  V1beta1__Device *device;
};
#define V1BETA1__UPDATE_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__update_device_request__descriptor) \
, NULL }


struct  V1beta1__UpdateDeviceResponse
{
  ProtobufCMessage base;
};
#define V1BETA1__UPDATE_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__update_device_response__descriptor) \
 }


struct  V1beta1__UpdateDeviceModelRequest
{
  ProtobufCMessage base;
  V1beta1__DeviceModel *model;
};
#define V1BETA1__UPDATE_DEVICE_MODEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__update_device_model_request__descriptor) \
, NULL }


struct  V1beta1__UpdateDeviceModelResponse
{
  ProtobufCMessage base;
};
#define V1BETA1__UPDATE_DEVICE_MODEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__update_device_model_response__descriptor) \
 }


struct  V1beta1__GetDeviceRequest
{
  ProtobufCMessage base;
  char *devicename;
  char *devicenamespace;
};
#define V1BETA1__GET_DEVICE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__get_device_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  V1beta1__GetDeviceResponse
{
  ProtobufCMessage base;
  V1beta1__Device *device;
};
#define V1BETA1__GET_DEVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v1beta1__get_device_response__descriptor) \
, NULL }


/* V1beta1__MapperRegisterRequest methods */
void   v1beta1__mapper_register_request__init
                     (V1beta1__MapperRegisterRequest         *message);
size_t v1beta1__mapper_register_request__get_packed_size
                     (const V1beta1__MapperRegisterRequest   *message);
size_t v1beta1__mapper_register_request__pack
                     (const V1beta1__MapperRegisterRequest   *message,
                      uint8_t             *out);
size_t v1beta1__mapper_register_request__pack_to_buffer
                     (const V1beta1__MapperRegisterRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__MapperRegisterRequest *
       v1beta1__mapper_register_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__mapper_register_request__free_unpacked
                     (V1beta1__MapperRegisterRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__MapperRegisterResponse methods */
void   v1beta1__mapper_register_response__init
                     (V1beta1__MapperRegisterResponse         *message);
size_t v1beta1__mapper_register_response__get_packed_size
                     (const V1beta1__MapperRegisterResponse   *message);
size_t v1beta1__mapper_register_response__pack
                     (const V1beta1__MapperRegisterResponse   *message,
                      uint8_t             *out);
size_t v1beta1__mapper_register_response__pack_to_buffer
                     (const V1beta1__MapperRegisterResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__MapperRegisterResponse *
       v1beta1__mapper_register_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__mapper_register_response__free_unpacked
                     (V1beta1__MapperRegisterResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DeviceModel methods */
void   v1beta1__device_model__init
                     (V1beta1__DeviceModel         *message);
size_t v1beta1__device_model__get_packed_size
                     (const V1beta1__DeviceModel   *message);
size_t v1beta1__device_model__pack
                     (const V1beta1__DeviceModel   *message,
                      uint8_t             *out);
size_t v1beta1__device_model__pack_to_buffer
                     (const V1beta1__DeviceModel   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DeviceModel *
       v1beta1__device_model__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device_model__free_unpacked
                     (V1beta1__DeviceModel *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DeviceModelSpec methods */
void   v1beta1__device_model_spec__init
                     (V1beta1__DeviceModelSpec         *message);
size_t v1beta1__device_model_spec__get_packed_size
                     (const V1beta1__DeviceModelSpec   *message);
size_t v1beta1__device_model_spec__pack
                     (const V1beta1__DeviceModelSpec   *message,
                      uint8_t             *out);
size_t v1beta1__device_model_spec__pack_to_buffer
                     (const V1beta1__DeviceModelSpec   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DeviceModelSpec *
       v1beta1__device_model_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device_model_spec__free_unpacked
                     (V1beta1__DeviceModelSpec *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__ModelProperty methods */
void   v1beta1__model_property__init
                     (V1beta1__ModelProperty         *message);
size_t v1beta1__model_property__get_packed_size
                     (const V1beta1__ModelProperty   *message);
size_t v1beta1__model_property__pack
                     (const V1beta1__ModelProperty   *message,
                      uint8_t             *out);
size_t v1beta1__model_property__pack_to_buffer
                     (const V1beta1__ModelProperty   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__ModelProperty *
       v1beta1__model_property__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__model_property__free_unpacked
                     (V1beta1__ModelProperty *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DeviceCommand methods */
void   v1beta1__device_command__init
                     (V1beta1__DeviceCommand         *message);
size_t v1beta1__device_command__get_packed_size
                     (const V1beta1__DeviceCommand   *message);
size_t v1beta1__device_command__pack
                     (const V1beta1__DeviceCommand   *message,
                      uint8_t             *out);
size_t v1beta1__device_command__pack_to_buffer
                     (const V1beta1__DeviceCommand   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DeviceCommand *
       v1beta1__device_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device_command__free_unpacked
                     (V1beta1__DeviceCommand *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__Device methods */
void   v1beta1__device__init
                     (V1beta1__Device         *message);
size_t v1beta1__device__get_packed_size
                     (const V1beta1__Device   *message);
size_t v1beta1__device__pack
                     (const V1beta1__Device   *message,
                      uint8_t             *out);
size_t v1beta1__device__pack_to_buffer
                     (const V1beta1__Device   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__Device *
       v1beta1__device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device__free_unpacked
                     (V1beta1__Device *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DeviceSpec methods */
void   v1beta1__device_spec__init
                     (V1beta1__DeviceSpec         *message);
size_t v1beta1__device_spec__get_packed_size
                     (const V1beta1__DeviceSpec   *message);
size_t v1beta1__device_spec__pack
                     (const V1beta1__DeviceSpec   *message,
                      uint8_t             *out);
size_t v1beta1__device_spec__pack_to_buffer
                     (const V1beta1__DeviceSpec   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DeviceSpec *
       v1beta1__device_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device_spec__free_unpacked
                     (V1beta1__DeviceSpec *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DeviceMethod methods */
void   v1beta1__device_method__init
                     (V1beta1__DeviceMethod         *message);
size_t v1beta1__device_method__get_packed_size
                     (const V1beta1__DeviceMethod   *message);
size_t v1beta1__device_method__pack
                     (const V1beta1__DeviceMethod   *message,
                      uint8_t             *out);
size_t v1beta1__device_method__pack_to_buffer
                     (const V1beta1__DeviceMethod   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DeviceMethod *
       v1beta1__device_method__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device_method__free_unpacked
                     (V1beta1__DeviceMethod *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DeviceProperty methods */
void   v1beta1__device_property__init
                     (V1beta1__DeviceProperty         *message);
size_t v1beta1__device_property__get_packed_size
                     (const V1beta1__DeviceProperty   *message);
size_t v1beta1__device_property__pack
                     (const V1beta1__DeviceProperty   *message,
                      uint8_t             *out);
size_t v1beta1__device_property__pack_to_buffer
                     (const V1beta1__DeviceProperty   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DeviceProperty *
       v1beta1__device_property__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device_property__free_unpacked
                     (V1beta1__DeviceProperty *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__ProtocolConfig methods */
void   v1beta1__protocol_config__init
                     (V1beta1__ProtocolConfig         *message);
size_t v1beta1__protocol_config__get_packed_size
                     (const V1beta1__ProtocolConfig   *message);
size_t v1beta1__protocol_config__pack
                     (const V1beta1__ProtocolConfig   *message,
                      uint8_t             *out);
size_t v1beta1__protocol_config__pack_to_buffer
                     (const V1beta1__ProtocolConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__ProtocolConfig *
       v1beta1__protocol_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__protocol_config__free_unpacked
                     (V1beta1__ProtocolConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__VisitorConfig methods */
void   v1beta1__visitor_config__init
                     (V1beta1__VisitorConfig         *message);
size_t v1beta1__visitor_config__get_packed_size
                     (const V1beta1__VisitorConfig   *message);
size_t v1beta1__visitor_config__pack
                     (const V1beta1__VisitorConfig   *message,
                      uint8_t             *out);
size_t v1beta1__visitor_config__pack_to_buffer
                     (const V1beta1__VisitorConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__VisitorConfig *
       v1beta1__visitor_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__visitor_config__free_unpacked
                     (V1beta1__VisitorConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__CustomizedValue__DataEntry methods */
void   v1beta1__customized_value__data_entry__init
                     (V1beta1__CustomizedValue__DataEntry         *message);
/* V1beta1__CustomizedValue methods */
void   v1beta1__customized_value__init
                     (V1beta1__CustomizedValue         *message);
size_t v1beta1__customized_value__get_packed_size
                     (const V1beta1__CustomizedValue   *message);
size_t v1beta1__customized_value__pack
                     (const V1beta1__CustomizedValue   *message,
                      uint8_t             *out);
size_t v1beta1__customized_value__pack_to_buffer
                     (const V1beta1__CustomizedValue   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__CustomizedValue *
       v1beta1__customized_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__customized_value__free_unpacked
                     (V1beta1__CustomizedValue *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__PushMethod methods */
void   v1beta1__push_method__init
                     (V1beta1__PushMethod         *message);
size_t v1beta1__push_method__get_packed_size
                     (const V1beta1__PushMethod   *message);
size_t v1beta1__push_method__pack
                     (const V1beta1__PushMethod   *message,
                      uint8_t             *out);
size_t v1beta1__push_method__pack_to_buffer
                     (const V1beta1__PushMethod   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__PushMethod *
       v1beta1__push_method__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__push_method__free_unpacked
                     (V1beta1__PushMethod *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__PushMethodHTTP methods */
void   v1beta1__push_method_http__init
                     (V1beta1__PushMethodHTTP         *message);
size_t v1beta1__push_method_http__get_packed_size
                     (const V1beta1__PushMethodHTTP   *message);
size_t v1beta1__push_method_http__pack
                     (const V1beta1__PushMethodHTTP   *message,
                      uint8_t             *out);
size_t v1beta1__push_method_http__pack_to_buffer
                     (const V1beta1__PushMethodHTTP   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__PushMethodHTTP *
       v1beta1__push_method_http__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__push_method_http__free_unpacked
                     (V1beta1__PushMethodHTTP *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__PushMethodMQTT methods */
void   v1beta1__push_method_mqtt__init
                     (V1beta1__PushMethodMQTT         *message);
size_t v1beta1__push_method_mqtt__get_packed_size
                     (const V1beta1__PushMethodMQTT   *message);
size_t v1beta1__push_method_mqtt__pack
                     (const V1beta1__PushMethodMQTT   *message,
                      uint8_t             *out);
size_t v1beta1__push_method_mqtt__pack_to_buffer
                     (const V1beta1__PushMethodMQTT   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__PushMethodMQTT *
       v1beta1__push_method_mqtt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__push_method_mqtt__free_unpacked
                     (V1beta1__PushMethodMQTT *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__PushMethodOTEL methods */
void   v1beta1__push_method_otel__init
                     (V1beta1__PushMethodOTEL         *message);
size_t v1beta1__push_method_otel__get_packed_size
                     (const V1beta1__PushMethodOTEL   *message);
size_t v1beta1__push_method_otel__pack
                     (const V1beta1__PushMethodOTEL   *message,
                      uint8_t             *out);
size_t v1beta1__push_method_otel__pack_to_buffer
                     (const V1beta1__PushMethodOTEL   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__PushMethodOTEL *
       v1beta1__push_method_otel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__push_method_otel__free_unpacked
                     (V1beta1__PushMethodOTEL *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DBMethod methods */
void   v1beta1__dbmethod__init
                     (V1beta1__DBMethod         *message);
size_t v1beta1__dbmethod__get_packed_size
                     (const V1beta1__DBMethod   *message);
size_t v1beta1__dbmethod__pack
                     (const V1beta1__DBMethod   *message,
                      uint8_t             *out);
size_t v1beta1__dbmethod__pack_to_buffer
                     (const V1beta1__DBMethod   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DBMethod *
       v1beta1__dbmethod__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__dbmethod__free_unpacked
                     (V1beta1__DBMethod *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DBMethodInfluxdb2 methods */
void   v1beta1__dbmethod_influxdb2__init
                     (V1beta1__DBMethodInfluxdb2         *message);
size_t v1beta1__dbmethod_influxdb2__get_packed_size
                     (const V1beta1__DBMethodInfluxdb2   *message);
size_t v1beta1__dbmethod_influxdb2__pack
                     (const V1beta1__DBMethodInfluxdb2   *message,
                      uint8_t             *out);
size_t v1beta1__dbmethod_influxdb2__pack_to_buffer
                     (const V1beta1__DBMethodInfluxdb2   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DBMethodInfluxdb2 *
       v1beta1__dbmethod_influxdb2__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__dbmethod_influxdb2__free_unpacked
                     (V1beta1__DBMethodInfluxdb2 *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__Influxdb2DataConfig__TagEntry methods */
void   v1beta1__influxdb2_data_config__tag_entry__init
                     (V1beta1__Influxdb2DataConfig__TagEntry         *message);
/* V1beta1__Influxdb2DataConfig methods */
void   v1beta1__influxdb2_data_config__init
                     (V1beta1__Influxdb2DataConfig         *message);
size_t v1beta1__influxdb2_data_config__get_packed_size
                     (const V1beta1__Influxdb2DataConfig   *message);
size_t v1beta1__influxdb2_data_config__pack
                     (const V1beta1__Influxdb2DataConfig   *message,
                      uint8_t             *out);
size_t v1beta1__influxdb2_data_config__pack_to_buffer
                     (const V1beta1__Influxdb2DataConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__Influxdb2DataConfig *
       v1beta1__influxdb2_data_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__influxdb2_data_config__free_unpacked
                     (V1beta1__Influxdb2DataConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__Influxdb2ClientConfig methods */
void   v1beta1__influxdb2_client_config__init
                     (V1beta1__Influxdb2ClientConfig         *message);
size_t v1beta1__influxdb2_client_config__get_packed_size
                     (const V1beta1__Influxdb2ClientConfig   *message);
size_t v1beta1__influxdb2_client_config__pack
                     (const V1beta1__Influxdb2ClientConfig   *message,
                      uint8_t             *out);
size_t v1beta1__influxdb2_client_config__pack_to_buffer
                     (const V1beta1__Influxdb2ClientConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__Influxdb2ClientConfig *
       v1beta1__influxdb2_client_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__influxdb2_client_config__free_unpacked
                     (V1beta1__Influxdb2ClientConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DBMethodRedis methods */
void   v1beta1__dbmethod_redis__init
                     (V1beta1__DBMethodRedis         *message);
size_t v1beta1__dbmethod_redis__get_packed_size
                     (const V1beta1__DBMethodRedis   *message);
size_t v1beta1__dbmethod_redis__pack
                     (const V1beta1__DBMethodRedis   *message,
                      uint8_t             *out);
size_t v1beta1__dbmethod_redis__pack_to_buffer
                     (const V1beta1__DBMethodRedis   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DBMethodRedis *
       v1beta1__dbmethod_redis__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__dbmethod_redis__free_unpacked
                     (V1beta1__DBMethodRedis *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__RedisClientConfig methods */
void   v1beta1__redis_client_config__init
                     (V1beta1__RedisClientConfig         *message);
size_t v1beta1__redis_client_config__get_packed_size
                     (const V1beta1__RedisClientConfig   *message);
size_t v1beta1__redis_client_config__pack
                     (const V1beta1__RedisClientConfig   *message,
                      uint8_t             *out);
size_t v1beta1__redis_client_config__pack_to_buffer
                     (const V1beta1__RedisClientConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__RedisClientConfig *
       v1beta1__redis_client_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__redis_client_config__free_unpacked
                     (V1beta1__RedisClientConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DBMethodTDEngine methods */
void   v1beta1__dbmethod_tdengine__init
                     (V1beta1__DBMethodTDEngine         *message);
size_t v1beta1__dbmethod_tdengine__get_packed_size
                     (const V1beta1__DBMethodTDEngine   *message);
size_t v1beta1__dbmethod_tdengine__pack
                     (const V1beta1__DBMethodTDEngine   *message,
                      uint8_t             *out);
size_t v1beta1__dbmethod_tdengine__pack_to_buffer
                     (const V1beta1__DBMethodTDEngine   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DBMethodTDEngine *
       v1beta1__dbmethod_tdengine__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__dbmethod_tdengine__free_unpacked
                     (V1beta1__DBMethodTDEngine *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__TDEngineClientConfig methods */
void   v1beta1__tdengine_client_config__init
                     (V1beta1__TDEngineClientConfig         *message);
size_t v1beta1__tdengine_client_config__get_packed_size
                     (const V1beta1__TDEngineClientConfig   *message);
size_t v1beta1__tdengine_client_config__pack
                     (const V1beta1__TDEngineClientConfig   *message,
                      uint8_t             *out);
size_t v1beta1__tdengine_client_config__pack_to_buffer
                     (const V1beta1__TDEngineClientConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__TDEngineClientConfig *
       v1beta1__tdengine_client_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__tdengine_client_config__free_unpacked
                     (V1beta1__TDEngineClientConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DBMethodMySQL methods */
void   v1beta1__dbmethod_my_sql__init
                     (V1beta1__DBMethodMySQL         *message);
size_t v1beta1__dbmethod_my_sql__get_packed_size
                     (const V1beta1__DBMethodMySQL   *message);
size_t v1beta1__dbmethod_my_sql__pack
                     (const V1beta1__DBMethodMySQL   *message,
                      uint8_t             *out);
size_t v1beta1__dbmethod_my_sql__pack_to_buffer
                     (const V1beta1__DBMethodMySQL   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DBMethodMySQL *
       v1beta1__dbmethod_my_sql__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__dbmethod_my_sql__free_unpacked
                     (V1beta1__DBMethodMySQL *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__MySQLClientConfig methods */
void   v1beta1__my_sqlclient_config__init
                     (V1beta1__MySQLClientConfig         *message);
size_t v1beta1__my_sqlclient_config__get_packed_size
                     (const V1beta1__MySQLClientConfig   *message);
size_t v1beta1__my_sqlclient_config__pack
                     (const V1beta1__MySQLClientConfig   *message,
                      uint8_t             *out);
size_t v1beta1__my_sqlclient_config__pack_to_buffer
                     (const V1beta1__MySQLClientConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__MySQLClientConfig *
       v1beta1__my_sqlclient_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__my_sqlclient_config__free_unpacked
                     (V1beta1__MySQLClientConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DBMethodOTEL methods */
void   v1beta1__dbmethod_otel__init
                     (V1beta1__DBMethodOTEL         *message);
size_t v1beta1__dbmethod_otel__get_packed_size
                     (const V1beta1__DBMethodOTEL   *message);
size_t v1beta1__dbmethod_otel__pack
                     (const V1beta1__DBMethodOTEL   *message,
                      uint8_t             *out);
size_t v1beta1__dbmethod_otel__pack_to_buffer
                     (const V1beta1__DBMethodOTEL   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DBMethodOTEL *
       v1beta1__dbmethod_otel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__dbmethod_otel__free_unpacked
                     (V1beta1__DBMethodOTEL *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__OTELExporterConfig methods */
void   v1beta1__otelexporter_config__init
                     (V1beta1__OTELExporterConfig         *message);
size_t v1beta1__otelexporter_config__get_packed_size
                     (const V1beta1__OTELExporterConfig   *message);
size_t v1beta1__otelexporter_config__pack
                     (const V1beta1__OTELExporterConfig   *message,
                      uint8_t             *out);
size_t v1beta1__otelexporter_config__pack_to_buffer
                     (const V1beta1__OTELExporterConfig   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__OTELExporterConfig *
       v1beta1__otelexporter_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__otelexporter_config__free_unpacked
                     (V1beta1__OTELExporterConfig *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__MapperInfo methods */
void   v1beta1__mapper_info__init
                     (V1beta1__MapperInfo         *message);
size_t v1beta1__mapper_info__get_packed_size
                     (const V1beta1__MapperInfo   *message);
size_t v1beta1__mapper_info__pack
                     (const V1beta1__MapperInfo   *message,
                      uint8_t             *out);
size_t v1beta1__mapper_info__pack_to_buffer
                     (const V1beta1__MapperInfo   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__MapperInfo *
       v1beta1__mapper_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__mapper_info__free_unpacked
                     (V1beta1__MapperInfo *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__ReportDeviceStatusRequest methods */
void   v1beta1__report_device_status_request__init
                     (V1beta1__ReportDeviceStatusRequest         *message);
size_t v1beta1__report_device_status_request__get_packed_size
                     (const V1beta1__ReportDeviceStatusRequest   *message);
size_t v1beta1__report_device_status_request__pack
                     (const V1beta1__ReportDeviceStatusRequest   *message,
                      uint8_t             *out);
size_t v1beta1__report_device_status_request__pack_to_buffer
                     (const V1beta1__ReportDeviceStatusRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__ReportDeviceStatusRequest *
       v1beta1__report_device_status_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__report_device_status_request__free_unpacked
                     (V1beta1__ReportDeviceStatusRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__ReportDeviceStatesRequest methods */
void   v1beta1__report_device_states_request__init
                     (V1beta1__ReportDeviceStatesRequest         *message);
size_t v1beta1__report_device_states_request__get_packed_size
                     (const V1beta1__ReportDeviceStatesRequest   *message);
size_t v1beta1__report_device_states_request__pack
                     (const V1beta1__ReportDeviceStatesRequest   *message,
                      uint8_t             *out);
size_t v1beta1__report_device_states_request__pack_to_buffer
                     (const V1beta1__ReportDeviceStatesRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__ReportDeviceStatesRequest *
       v1beta1__report_device_states_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__report_device_states_request__free_unpacked
                     (V1beta1__ReportDeviceStatesRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__DeviceStatus methods */
void   v1beta1__device_status__init
                     (V1beta1__DeviceStatus         *message);
size_t v1beta1__device_status__get_packed_size
                     (const V1beta1__DeviceStatus   *message);
size_t v1beta1__device_status__pack
                     (const V1beta1__DeviceStatus   *message,
                      uint8_t             *out);
size_t v1beta1__device_status__pack_to_buffer
                     (const V1beta1__DeviceStatus   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__DeviceStatus *
       v1beta1__device_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__device_status__free_unpacked
                     (V1beta1__DeviceStatus *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__Twin methods */
void   v1beta1__twin__init
                     (V1beta1__Twin         *message);
size_t v1beta1__twin__get_packed_size
                     (const V1beta1__Twin   *message);
size_t v1beta1__twin__pack
                     (const V1beta1__Twin   *message,
                      uint8_t             *out);
size_t v1beta1__twin__pack_to_buffer
                     (const V1beta1__Twin   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__Twin *
       v1beta1__twin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__twin__free_unpacked
                     (V1beta1__Twin *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__TwinProperty__MetadataEntry methods */
void   v1beta1__twin_property__metadata_entry__init
                     (V1beta1__TwinProperty__MetadataEntry         *message);
/* V1beta1__TwinProperty methods */
void   v1beta1__twin_property__init
                     (V1beta1__TwinProperty         *message);
size_t v1beta1__twin_property__get_packed_size
                     (const V1beta1__TwinProperty   *message);
size_t v1beta1__twin_property__pack
                     (const V1beta1__TwinProperty   *message,
                      uint8_t             *out);
size_t v1beta1__twin_property__pack_to_buffer
                     (const V1beta1__TwinProperty   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__TwinProperty *
       v1beta1__twin_property__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__twin_property__free_unpacked
                     (V1beta1__TwinProperty *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__ReportDeviceStatusResponse methods */
void   v1beta1__report_device_status_response__init
                     (V1beta1__ReportDeviceStatusResponse         *message);
size_t v1beta1__report_device_status_response__get_packed_size
                     (const V1beta1__ReportDeviceStatusResponse   *message);
size_t v1beta1__report_device_status_response__pack
                     (const V1beta1__ReportDeviceStatusResponse   *message,
                      uint8_t             *out);
size_t v1beta1__report_device_status_response__pack_to_buffer
                     (const V1beta1__ReportDeviceStatusResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__ReportDeviceStatusResponse *
       v1beta1__report_device_status_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__report_device_status_response__free_unpacked
                     (V1beta1__ReportDeviceStatusResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__ReportDeviceStatesResponse methods */
void   v1beta1__report_device_states_response__init
                     (V1beta1__ReportDeviceStatesResponse         *message);
size_t v1beta1__report_device_states_response__get_packed_size
                     (const V1beta1__ReportDeviceStatesResponse   *message);
size_t v1beta1__report_device_states_response__pack
                     (const V1beta1__ReportDeviceStatesResponse   *message,
                      uint8_t             *out);
size_t v1beta1__report_device_states_response__pack_to_buffer
                     (const V1beta1__ReportDeviceStatesResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__ReportDeviceStatesResponse *
       v1beta1__report_device_states_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__report_device_states_response__free_unpacked
                     (V1beta1__ReportDeviceStatesResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__RegisterDeviceRequest methods */
void   v1beta1__register_device_request__init
                     (V1beta1__RegisterDeviceRequest         *message);
size_t v1beta1__register_device_request__get_packed_size
                     (const V1beta1__RegisterDeviceRequest   *message);
size_t v1beta1__register_device_request__pack
                     (const V1beta1__RegisterDeviceRequest   *message,
                      uint8_t             *out);
size_t v1beta1__register_device_request__pack_to_buffer
                     (const V1beta1__RegisterDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__RegisterDeviceRequest *
       v1beta1__register_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__register_device_request__free_unpacked
                     (V1beta1__RegisterDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__RegisterDeviceResponse methods */
void   v1beta1__register_device_response__init
                     (V1beta1__RegisterDeviceResponse         *message);
size_t v1beta1__register_device_response__get_packed_size
                     (const V1beta1__RegisterDeviceResponse   *message);
size_t v1beta1__register_device_response__pack
                     (const V1beta1__RegisterDeviceResponse   *message,
                      uint8_t             *out);
size_t v1beta1__register_device_response__pack_to_buffer
                     (const V1beta1__RegisterDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__RegisterDeviceResponse *
       v1beta1__register_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__register_device_response__free_unpacked
                     (V1beta1__RegisterDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__CreateDeviceModelRequest methods */
void   v1beta1__create_device_model_request__init
                     (V1beta1__CreateDeviceModelRequest         *message);
size_t v1beta1__create_device_model_request__get_packed_size
                     (const V1beta1__CreateDeviceModelRequest   *message);
size_t v1beta1__create_device_model_request__pack
                     (const V1beta1__CreateDeviceModelRequest   *message,
                      uint8_t             *out);
size_t v1beta1__create_device_model_request__pack_to_buffer
                     (const V1beta1__CreateDeviceModelRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__CreateDeviceModelRequest *
       v1beta1__create_device_model_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__create_device_model_request__free_unpacked
                     (V1beta1__CreateDeviceModelRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__CreateDeviceModelResponse methods */
void   v1beta1__create_device_model_response__init
                     (V1beta1__CreateDeviceModelResponse         *message);
size_t v1beta1__create_device_model_response__get_packed_size
                     (const V1beta1__CreateDeviceModelResponse   *message);
size_t v1beta1__create_device_model_response__pack
                     (const V1beta1__CreateDeviceModelResponse   *message,
                      uint8_t             *out);
size_t v1beta1__create_device_model_response__pack_to_buffer
                     (const V1beta1__CreateDeviceModelResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__CreateDeviceModelResponse *
       v1beta1__create_device_model_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__create_device_model_response__free_unpacked
                     (V1beta1__CreateDeviceModelResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__RemoveDeviceRequest methods */
void   v1beta1__remove_device_request__init
                     (V1beta1__RemoveDeviceRequest         *message);
size_t v1beta1__remove_device_request__get_packed_size
                     (const V1beta1__RemoveDeviceRequest   *message);
size_t v1beta1__remove_device_request__pack
                     (const V1beta1__RemoveDeviceRequest   *message,
                      uint8_t             *out);
size_t v1beta1__remove_device_request__pack_to_buffer
                     (const V1beta1__RemoveDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__RemoveDeviceRequest *
       v1beta1__remove_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__remove_device_request__free_unpacked
                     (V1beta1__RemoveDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__RemoveDeviceResponse methods */
void   v1beta1__remove_device_response__init
                     (V1beta1__RemoveDeviceResponse         *message);
size_t v1beta1__remove_device_response__get_packed_size
                     (const V1beta1__RemoveDeviceResponse   *message);
size_t v1beta1__remove_device_response__pack
                     (const V1beta1__RemoveDeviceResponse   *message,
                      uint8_t             *out);
size_t v1beta1__remove_device_response__pack_to_buffer
                     (const V1beta1__RemoveDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__RemoveDeviceResponse *
       v1beta1__remove_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__remove_device_response__free_unpacked
                     (V1beta1__RemoveDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__RemoveDeviceModelRequest methods */
void   v1beta1__remove_device_model_request__init
                     (V1beta1__RemoveDeviceModelRequest         *message);
size_t v1beta1__remove_device_model_request__get_packed_size
                     (const V1beta1__RemoveDeviceModelRequest   *message);
size_t v1beta1__remove_device_model_request__pack
                     (const V1beta1__RemoveDeviceModelRequest   *message,
                      uint8_t             *out);
size_t v1beta1__remove_device_model_request__pack_to_buffer
                     (const V1beta1__RemoveDeviceModelRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__RemoveDeviceModelRequest *
       v1beta1__remove_device_model_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__remove_device_model_request__free_unpacked
                     (V1beta1__RemoveDeviceModelRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__RemoveDeviceModelResponse methods */
void   v1beta1__remove_device_model_response__init
                     (V1beta1__RemoveDeviceModelResponse         *message);
size_t v1beta1__remove_device_model_response__get_packed_size
                     (const V1beta1__RemoveDeviceModelResponse   *message);
size_t v1beta1__remove_device_model_response__pack
                     (const V1beta1__RemoveDeviceModelResponse   *message,
                      uint8_t             *out);
size_t v1beta1__remove_device_model_response__pack_to_buffer
                     (const V1beta1__RemoveDeviceModelResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__RemoveDeviceModelResponse *
       v1beta1__remove_device_model_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__remove_device_model_response__free_unpacked
                     (V1beta1__RemoveDeviceModelResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__UpdateDeviceRequest methods */
void   v1beta1__update_device_request__init
                     (V1beta1__UpdateDeviceRequest         *message);
size_t v1beta1__update_device_request__get_packed_size
                     (const V1beta1__UpdateDeviceRequest   *message);
size_t v1beta1__update_device_request__pack
                     (const V1beta1__UpdateDeviceRequest   *message,
                      uint8_t             *out);
size_t v1beta1__update_device_request__pack_to_buffer
                     (const V1beta1__UpdateDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__UpdateDeviceRequest *
       v1beta1__update_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__update_device_request__free_unpacked
                     (V1beta1__UpdateDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__UpdateDeviceResponse methods */
void   v1beta1__update_device_response__init
                     (V1beta1__UpdateDeviceResponse         *message);
size_t v1beta1__update_device_response__get_packed_size
                     (const V1beta1__UpdateDeviceResponse   *message);
size_t v1beta1__update_device_response__pack
                     (const V1beta1__UpdateDeviceResponse   *message,
                      uint8_t             *out);
size_t v1beta1__update_device_response__pack_to_buffer
                     (const V1beta1__UpdateDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__UpdateDeviceResponse *
       v1beta1__update_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__update_device_response__free_unpacked
                     (V1beta1__UpdateDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__UpdateDeviceModelRequest methods */
void   v1beta1__update_device_model_request__init
                     (V1beta1__UpdateDeviceModelRequest         *message);
size_t v1beta1__update_device_model_request__get_packed_size
                     (const V1beta1__UpdateDeviceModelRequest   *message);
size_t v1beta1__update_device_model_request__pack
                     (const V1beta1__UpdateDeviceModelRequest   *message,
                      uint8_t             *out);
size_t v1beta1__update_device_model_request__pack_to_buffer
                     (const V1beta1__UpdateDeviceModelRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__UpdateDeviceModelRequest *
       v1beta1__update_device_model_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__update_device_model_request__free_unpacked
                     (V1beta1__UpdateDeviceModelRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__UpdateDeviceModelResponse methods */
void   v1beta1__update_device_model_response__init
                     (V1beta1__UpdateDeviceModelResponse         *message);
size_t v1beta1__update_device_model_response__get_packed_size
                     (const V1beta1__UpdateDeviceModelResponse   *message);
size_t v1beta1__update_device_model_response__pack
                     (const V1beta1__UpdateDeviceModelResponse   *message,
                      uint8_t             *out);
size_t v1beta1__update_device_model_response__pack_to_buffer
                     (const V1beta1__UpdateDeviceModelResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__UpdateDeviceModelResponse *
       v1beta1__update_device_model_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__update_device_model_response__free_unpacked
                     (V1beta1__UpdateDeviceModelResponse *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__GetDeviceRequest methods */
void   v1beta1__get_device_request__init
                     (V1beta1__GetDeviceRequest         *message);
size_t v1beta1__get_device_request__get_packed_size
                     (const V1beta1__GetDeviceRequest   *message);
size_t v1beta1__get_device_request__pack
                     (const V1beta1__GetDeviceRequest   *message,
                      uint8_t             *out);
size_t v1beta1__get_device_request__pack_to_buffer
                     (const V1beta1__GetDeviceRequest   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__GetDeviceRequest *
       v1beta1__get_device_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__get_device_request__free_unpacked
                     (V1beta1__GetDeviceRequest *message,
                      ProtobufCAllocator *allocator);
/* V1beta1__GetDeviceResponse methods */
void   v1beta1__get_device_response__init
                     (V1beta1__GetDeviceResponse         *message);
size_t v1beta1__get_device_response__get_packed_size
                     (const V1beta1__GetDeviceResponse   *message);
size_t v1beta1__get_device_response__pack
                     (const V1beta1__GetDeviceResponse   *message,
                      uint8_t             *out);
size_t v1beta1__get_device_response__pack_to_buffer
                     (const V1beta1__GetDeviceResponse   *message,
                      ProtobufCBuffer     *buffer);
V1beta1__GetDeviceResponse *
       v1beta1__get_device_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v1beta1__get_device_response__free_unpacked
                     (V1beta1__GetDeviceResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*V1beta1__MapperRegisterRequest_Closure)
                 (const V1beta1__MapperRegisterRequest *message,
                  void *closure_data);
typedef void (*V1beta1__MapperRegisterResponse_Closure)
                 (const V1beta1__MapperRegisterResponse *message,
                  void *closure_data);
typedef void (*V1beta1__DeviceModel_Closure)
                 (const V1beta1__DeviceModel *message,
                  void *closure_data);
typedef void (*V1beta1__DeviceModelSpec_Closure)
                 (const V1beta1__DeviceModelSpec *message,
                  void *closure_data);
typedef void (*V1beta1__ModelProperty_Closure)
                 (const V1beta1__ModelProperty *message,
                  void *closure_data);
typedef void (*V1beta1__DeviceCommand_Closure)
                 (const V1beta1__DeviceCommand *message,
                  void *closure_data);
typedef void (*V1beta1__Device_Closure)
                 (const V1beta1__Device *message,
                  void *closure_data);
typedef void (*V1beta1__DeviceSpec_Closure)
                 (const V1beta1__DeviceSpec *message,
                  void *closure_data);
typedef void (*V1beta1__DeviceMethod_Closure)
                 (const V1beta1__DeviceMethod *message,
                  void *closure_data);
typedef void (*V1beta1__DeviceProperty_Closure)
                 (const V1beta1__DeviceProperty *message,
                  void *closure_data);
typedef void (*V1beta1__ProtocolConfig_Closure)
                 (const V1beta1__ProtocolConfig *message,
                  void *closure_data);
typedef void (*V1beta1__VisitorConfig_Closure)
                 (const V1beta1__VisitorConfig *message,
                  void *closure_data);
typedef void (*V1beta1__CustomizedValue__DataEntry_Closure)
                 (const V1beta1__CustomizedValue__DataEntry *message,
                  void *closure_data);
typedef void (*V1beta1__CustomizedValue_Closure)
                 (const V1beta1__CustomizedValue *message,
                  void *closure_data);
typedef void (*V1beta1__PushMethod_Closure)
                 (const V1beta1__PushMethod *message,
                  void *closure_data);
typedef void (*V1beta1__PushMethodHTTP_Closure)
                 (const V1beta1__PushMethodHTTP *message,
                  void *closure_data);
typedef void (*V1beta1__PushMethodMQTT_Closure)
                 (const V1beta1__PushMethodMQTT *message,
                  void *closure_data);
typedef void (*V1beta1__PushMethodOTEL_Closure)
                 (const V1beta1__PushMethodOTEL *message,
                  void *closure_data);
typedef void (*V1beta1__DBMethod_Closure)
                 (const V1beta1__DBMethod *message,
                  void *closure_data);
typedef void (*V1beta1__DBMethodInfluxdb2_Closure)
                 (const V1beta1__DBMethodInfluxdb2 *message,
                  void *closure_data);
typedef void (*V1beta1__Influxdb2DataConfig__TagEntry_Closure)
                 (const V1beta1__Influxdb2DataConfig__TagEntry *message,
                  void *closure_data);
typedef void (*V1beta1__Influxdb2DataConfig_Closure)
                 (const V1beta1__Influxdb2DataConfig *message,
                  void *closure_data);
typedef void (*V1beta1__Influxdb2ClientConfig_Closure)
                 (const V1beta1__Influxdb2ClientConfig *message,
                  void *closure_data);
typedef void (*V1beta1__DBMethodRedis_Closure)
                 (const V1beta1__DBMethodRedis *message,
                  void *closure_data);
typedef void (*V1beta1__RedisClientConfig_Closure)
                 (const V1beta1__RedisClientConfig *message,
                  void *closure_data);
typedef void (*V1beta1__DBMethodTDEngine_Closure)
                 (const V1beta1__DBMethodTDEngine *message,
                  void *closure_data);
typedef void (*V1beta1__TDEngineClientConfig_Closure)
                 (const V1beta1__TDEngineClientConfig *message,
                  void *closure_data);
typedef void (*V1beta1__DBMethodMySQL_Closure)
                 (const V1beta1__DBMethodMySQL *message,
                  void *closure_data);
typedef void (*V1beta1__MySQLClientConfig_Closure)
                 (const V1beta1__MySQLClientConfig *message,
                  void *closure_data);
typedef void (*V1beta1__DBMethodOTEL_Closure)
                 (const V1beta1__DBMethodOTEL *message,
                  void *closure_data);
typedef void (*V1beta1__OTELExporterConfig_Closure)
                 (const V1beta1__OTELExporterConfig *message,
                  void *closure_data);
typedef void (*V1beta1__MapperInfo_Closure)
                 (const V1beta1__MapperInfo *message,
                  void *closure_data);
typedef void (*V1beta1__ReportDeviceStatusRequest_Closure)
                 (const V1beta1__ReportDeviceStatusRequest *message,
                  void *closure_data);
typedef void (*V1beta1__ReportDeviceStatesRequest_Closure)
                 (const V1beta1__ReportDeviceStatesRequest *message,
                  void *closure_data);
typedef void (*V1beta1__DeviceStatus_Closure)
                 (const V1beta1__DeviceStatus *message,
                  void *closure_data);
typedef void (*V1beta1__Twin_Closure)
                 (const V1beta1__Twin *message,
                  void *closure_data);
typedef void (*V1beta1__TwinProperty__MetadataEntry_Closure)
                 (const V1beta1__TwinProperty__MetadataEntry *message,
                  void *closure_data);
typedef void (*V1beta1__TwinProperty_Closure)
                 (const V1beta1__TwinProperty *message,
                  void *closure_data);
typedef void (*V1beta1__ReportDeviceStatusResponse_Closure)
                 (const V1beta1__ReportDeviceStatusResponse *message,
                  void *closure_data);
typedef void (*V1beta1__ReportDeviceStatesResponse_Closure)
                 (const V1beta1__ReportDeviceStatesResponse *message,
                  void *closure_data);
typedef void (*V1beta1__RegisterDeviceRequest_Closure)
                 (const V1beta1__RegisterDeviceRequest *message,
                  void *closure_data);
typedef void (*V1beta1__RegisterDeviceResponse_Closure)
                 (const V1beta1__RegisterDeviceResponse *message,
                  void *closure_data);
typedef void (*V1beta1__CreateDeviceModelRequest_Closure)
                 (const V1beta1__CreateDeviceModelRequest *message,
                  void *closure_data);
typedef void (*V1beta1__CreateDeviceModelResponse_Closure)
                 (const V1beta1__CreateDeviceModelResponse *message,
                  void *closure_data);
typedef void (*V1beta1__RemoveDeviceRequest_Closure)
                 (const V1beta1__RemoveDeviceRequest *message,
                  void *closure_data);
typedef void (*V1beta1__RemoveDeviceResponse_Closure)
                 (const V1beta1__RemoveDeviceResponse *message,
                  void *closure_data);
typedef void (*V1beta1__RemoveDeviceModelRequest_Closure)
                 (const V1beta1__RemoveDeviceModelRequest *message,
                  void *closure_data);
typedef void (*V1beta1__RemoveDeviceModelResponse_Closure)
                 (const V1beta1__RemoveDeviceModelResponse *message,
                  void *closure_data);
typedef void (*V1beta1__UpdateDeviceRequest_Closure)
                 (const V1beta1__UpdateDeviceRequest *message,
                  void *closure_data);
typedef void (*V1beta1__UpdateDeviceResponse_Closure)
                 (const V1beta1__UpdateDeviceResponse *message,
                  void *closure_data);
typedef void (*V1beta1__UpdateDeviceModelRequest_Closure)
                 (const V1beta1__UpdateDeviceModelRequest *message,
                  void *closure_data);
typedef void (*V1beta1__UpdateDeviceModelResponse_Closure)
                 (const V1beta1__UpdateDeviceModelResponse *message,
                  void *closure_data);
typedef void (*V1beta1__GetDeviceRequest_Closure)
                 (const V1beta1__GetDeviceRequest *message,
                  void *closure_data);
typedef void (*V1beta1__GetDeviceResponse_Closure)
                 (const V1beta1__GetDeviceResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct V1beta1__DeviceManagerService_Service V1beta1__DeviceManagerService_Service;
struct V1beta1__DeviceManagerService_Service
{
  ProtobufCService base;
  void (*mapper_register)(V1beta1__DeviceManagerService_Service *service,
                          const V1beta1__MapperRegisterRequest *input,
                          V1beta1__MapperRegisterResponse_Closure closure,
                          void *closure_data);
  void (*report_device_status)(V1beta1__DeviceManagerService_Service *service,
                               const V1beta1__ReportDeviceStatusRequest *input,
                               V1beta1__ReportDeviceStatusResponse_Closure closure,
                               void *closure_data);
  void (*report_device_states)(V1beta1__DeviceManagerService_Service *service,
                               const V1beta1__ReportDeviceStatesRequest *input,
                               V1beta1__ReportDeviceStatesResponse_Closure closure,
                               void *closure_data);
};
typedef void (*V1beta1__DeviceManagerService_ServiceDestroy)(V1beta1__DeviceManagerService_Service *);
void v1beta1__device_manager_service__init (V1beta1__DeviceManagerService_Service *service,
                                            V1beta1__DeviceManagerService_ServiceDestroy destroy);
#define V1BETA1__DEVICE_MANAGER_SERVICE__BASE_INIT \
    { &v1beta1__device_manager_service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define V1BETA1__DEVICE_MANAGER_SERVICE__INIT(function_prefix__) \
    { V1BETA1__DEVICE_MANAGER_SERVICE__BASE_INIT,\
      function_prefix__ ## mapper_register,\
      function_prefix__ ## report_device_status,\
      function_prefix__ ## report_device_states  }
void v1beta1__device_manager_service__mapper_register(ProtobufCService *service,
                                                      const V1beta1__MapperRegisterRequest *input,
                                                      V1beta1__MapperRegisterResponse_Closure closure,
                                                      void *closure_data);
void v1beta1__device_manager_service__report_device_status(ProtobufCService *service,
                                                           const V1beta1__ReportDeviceStatusRequest *input,
                                                           V1beta1__ReportDeviceStatusResponse_Closure closure,
                                                           void *closure_data);
void v1beta1__device_manager_service__report_device_states(ProtobufCService *service,
                                                           const V1beta1__ReportDeviceStatesRequest *input,
                                                           V1beta1__ReportDeviceStatesResponse_Closure closure,
                                                           void *closure_data);
typedef struct V1beta1__DeviceMapperService_Service V1beta1__DeviceMapperService_Service;
struct V1beta1__DeviceMapperService_Service
{
  ProtobufCService base;
  void (*register_device)(V1beta1__DeviceMapperService_Service *service,
                          const V1beta1__RegisterDeviceRequest *input,
                          V1beta1__RegisterDeviceResponse_Closure closure,
                          void *closure_data);
  void (*remove_device)(V1beta1__DeviceMapperService_Service *service,
                        const V1beta1__RemoveDeviceRequest *input,
                        V1beta1__RemoveDeviceResponse_Closure closure,
                        void *closure_data);
  void (*update_device)(V1beta1__DeviceMapperService_Service *service,
                        const V1beta1__UpdateDeviceRequest *input,
                        V1beta1__UpdateDeviceResponse_Closure closure,
                        void *closure_data);
  void (*create_device_model)(V1beta1__DeviceMapperService_Service *service,
                              const V1beta1__CreateDeviceModelRequest *input,
                              V1beta1__CreateDeviceModelResponse_Closure closure,
                              void *closure_data);
  void (*remove_device_model)(V1beta1__DeviceMapperService_Service *service,
                              const V1beta1__RemoveDeviceModelRequest *input,
                              V1beta1__RemoveDeviceModelResponse_Closure closure,
                              void *closure_data);
  void (*update_device_model)(V1beta1__DeviceMapperService_Service *service,
                              const V1beta1__UpdateDeviceModelRequest *input,
                              V1beta1__UpdateDeviceModelResponse_Closure closure,
                              void *closure_data);
  void (*get_device)(V1beta1__DeviceMapperService_Service *service,
                     const V1beta1__GetDeviceRequest *input,
                     V1beta1__GetDeviceResponse_Closure closure,
                     void *closure_data);
};
typedef void (*V1beta1__DeviceMapperService_ServiceDestroy)(V1beta1__DeviceMapperService_Service *);
void v1beta1__device_mapper_service__init (V1beta1__DeviceMapperService_Service *service,
                                           V1beta1__DeviceMapperService_ServiceDestroy destroy);
#define V1BETA1__DEVICE_MAPPER_SERVICE__BASE_INIT \
    { &v1beta1__device_mapper_service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define V1BETA1__DEVICE_MAPPER_SERVICE__INIT(function_prefix__) \
    { V1BETA1__DEVICE_MAPPER_SERVICE__BASE_INIT,\
      function_prefix__ ## register_device,\
      function_prefix__ ## remove_device,\
      function_prefix__ ## update_device,\
      function_prefix__ ## create_device_model,\
      function_prefix__ ## remove_device_model,\
      function_prefix__ ## update_device_model,\
      function_prefix__ ## get_device  }
void v1beta1__device_mapper_service__register_device(ProtobufCService *service,
                                                     const V1beta1__RegisterDeviceRequest *input,
                                                     V1beta1__RegisterDeviceResponse_Closure closure,
                                                     void *closure_data);
void v1beta1__device_mapper_service__remove_device(ProtobufCService *service,
                                                   const V1beta1__RemoveDeviceRequest *input,
                                                   V1beta1__RemoveDeviceResponse_Closure closure,
                                                   void *closure_data);
void v1beta1__device_mapper_service__update_device(ProtobufCService *service,
                                                   const V1beta1__UpdateDeviceRequest *input,
                                                   V1beta1__UpdateDeviceResponse_Closure closure,
                                                   void *closure_data);
void v1beta1__device_mapper_service__create_device_model(ProtobufCService *service,
                                                         const V1beta1__CreateDeviceModelRequest *input,
                                                         V1beta1__CreateDeviceModelResponse_Closure closure,
                                                         void *closure_data);
void v1beta1__device_mapper_service__remove_device_model(ProtobufCService *service,
                                                         const V1beta1__RemoveDeviceModelRequest *input,
                                                         V1beta1__RemoveDeviceModelResponse_Closure closure,
                                                         void *closure_data);
void v1beta1__device_mapper_service__update_device_model(ProtobufCService *service,
                                                         const V1beta1__UpdateDeviceModelRequest *input,
                                                         V1beta1__UpdateDeviceModelResponse_Closure closure,
                                                         void *closure_data);
void v1beta1__device_mapper_service__get_device(ProtobufCService *service,
                                                const V1beta1__GetDeviceRequest *input,
                                                V1beta1__GetDeviceResponse_Closure closure,
                                                void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor v1beta1__mapper_register_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__mapper_register_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device_model__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device_model_spec__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__model_property__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device_command__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device_spec__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device_method__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device_property__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__protocol_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__visitor_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__customized_value__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__customized_value__data_entry__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__push_method__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__push_method_http__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__push_method_mqtt__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__push_method_otel__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__dbmethod__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__dbmethod_influxdb2__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__influxdb2_data_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__influxdb2_data_config__tag_entry__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__influxdb2_client_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__dbmethod_redis__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__redis_client_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__dbmethod_tdengine__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__tdengine_client_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__dbmethod_my_sql__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__my_sqlclient_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__dbmethod_otel__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__otelexporter_config__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__mapper_info__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__report_device_status_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__report_device_states_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__device_status__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__twin__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__twin_property__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__twin_property__metadata_entry__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__report_device_status_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__report_device_states_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__register_device_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__register_device_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__create_device_model_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__create_device_model_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__remove_device_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__remove_device_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__remove_device_model_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__remove_device_model_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__update_device_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__update_device_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__update_device_model_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__update_device_model_response__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__get_device_request__descriptor;
extern const ProtobufCMessageDescriptor v1beta1__get_device_response__descriptor;
extern const ProtobufCServiceDescriptor v1beta1__device_manager_service__descriptor;
extern const ProtobufCServiceDescriptor v1beta1__device_mapper_service__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_2eproto__INCLUDED */
