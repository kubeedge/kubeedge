// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto
// Original file comments:
//
// Copyright 2023 The KubeEdge Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// To regenerate api.pb.go run hack/generate-dmi-proto.sh
#ifndef GRPC_api_2eproto__INCLUDED
#define GRPC_api_2eproto__INCLUDED

#include "api.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace v1beta1 {

// DeviceManagerService defines the public APIS for remote device management.
// The server is implemented by the module of device manager in edgecore
// and the client is implemented by the device mapper for upstreaming.
// The mapper should register itself to the device manager when it is online
// to get the list of devices. And then the mapper can report the device status to the device manager.
class DeviceManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "v1beta1.DeviceManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // MapperRegister registers the information of the mapper to device manager
    // when the mapper is online. Device manager returns the list of devices and device models which
    // this mapper should manage.
    virtual ::grpc::Status MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::v1beta1::MapperRegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::MapperRegisterResponse>> AsyncMapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::MapperRegisterResponse>>(AsyncMapperRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::MapperRegisterResponse>> PrepareAsyncMapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::MapperRegisterResponse>>(PrepareAsyncMapperRegisterRaw(context, request, cq));
    }
    // ReportDeviceStatus reports the status of devices to device manager.
    // When the mapper collects some properties of a device, it can make them a map of device twins
    // and report it to the device manager through the interface of ReportDeviceStatus.
    virtual ::grpc::Status ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::v1beta1::ReportDeviceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatusResponse>> AsyncReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatusResponse>>(AsyncReportDeviceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatusResponse>> PrepareAsyncReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatusResponse>>(PrepareAsyncReportDeviceStatusRaw(context, request, cq));
    }
    // TODO Rename ReportDeviceStatus to ReportDeviceTwins
    // ReportDeviceStates reports the state of devices to device manager.
    virtual ::grpc::Status ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::v1beta1::ReportDeviceStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatesResponse>> AsyncReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatesResponse>>(AsyncReportDeviceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatesResponse>> PrepareAsyncReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatesResponse>>(PrepareAsyncReportDeviceStatesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // MapperRegister registers the information of the mapper to device manager
      // when the mapper is online. Device manager returns the list of devices and device models which
      // this mapper should manage.
      virtual void MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ReportDeviceStatus reports the status of devices to device manager.
      // When the mapper collects some properties of a device, it can make them a map of device twins
      // and report it to the device manager through the interface of ReportDeviceStatus.
      virtual void ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TODO Rename ReportDeviceStatus to ReportDeviceTwins
      // ReportDeviceStates reports the state of devices to device manager.
      virtual void ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::MapperRegisterResponse>* AsyncMapperRegisterRaw(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::MapperRegisterResponse>* PrepareAsyncMapperRegisterRaw(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatusResponse>* AsyncReportDeviceStatusRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatusResponse>* PrepareAsyncReportDeviceStatusRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatesResponse>* AsyncReportDeviceStatesRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::ReportDeviceStatesResponse>* PrepareAsyncReportDeviceStatesRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::v1beta1::MapperRegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>> AsyncMapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>>(AsyncMapperRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>> PrepareAsyncMapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>>(PrepareAsyncMapperRegisterRaw(context, request, cq));
    }
    ::grpc::Status ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::v1beta1::ReportDeviceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>> AsyncReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>>(AsyncReportDeviceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>> PrepareAsyncReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>>(PrepareAsyncReportDeviceStatusRaw(context, request, cq));
    }
    ::grpc::Status ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::v1beta1::ReportDeviceStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>> AsyncReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>>(AsyncReportDeviceStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>> PrepareAsyncReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>>(PrepareAsyncReportDeviceStatesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void MapperRegister(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportDeviceStatus(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportDeviceStates(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>* AsyncMapperRegisterRaw(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::MapperRegisterResponse>* PrepareAsyncMapperRegisterRaw(::grpc::ClientContext* context, const ::v1beta1::MapperRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>* AsyncReportDeviceStatusRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatusResponse>* PrepareAsyncReportDeviceStatusRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>* AsyncReportDeviceStatesRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::ReportDeviceStatesResponse>* PrepareAsyncReportDeviceStatesRaw(::grpc::ClientContext* context, const ::v1beta1::ReportDeviceStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_MapperRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportDeviceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportDeviceStates_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // MapperRegister registers the information of the mapper to device manager
    // when the mapper is online. Device manager returns the list of devices and device models which
    // this mapper should manage.
    virtual ::grpc::Status MapperRegister(::grpc::ServerContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response);
    // ReportDeviceStatus reports the status of devices to device manager.
    // When the mapper collects some properties of a device, it can make them a map of device twins
    // and report it to the device manager through the interface of ReportDeviceStatus.
    virtual ::grpc::Status ReportDeviceStatus(::grpc::ServerContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response);
    // TODO Rename ReportDeviceStatus to ReportDeviceTwins
    // ReportDeviceStates reports the state of devices to device manager.
    virtual ::grpc::Status ReportDeviceStates(::grpc::ServerContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_MapperRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MapperRegister() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MapperRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MapperRegister(::grpc::ServerContext* /*context*/, const ::v1beta1::MapperRegisterRequest* /*request*/, ::v1beta1::MapperRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMapperRegister(::grpc::ServerContext* context, ::v1beta1::MapperRegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::MapperRegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportDeviceStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReportDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStatus(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatusRequest* /*request*/, ::v1beta1::ReportDeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDeviceStatus(::grpc::ServerContext* context, ::v1beta1::ReportDeviceStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::ReportDeviceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportDeviceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportDeviceStates() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReportDeviceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStates(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatesRequest* /*request*/, ::v1beta1::ReportDeviceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDeviceStates(::grpc::ServerContext* context, ::v1beta1::ReportDeviceStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::ReportDeviceStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MapperRegister<WithAsyncMethod_ReportDeviceStatus<WithAsyncMethod_ReportDeviceStates<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_MapperRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MapperRegister() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::MapperRegisterRequest* request, ::v1beta1::MapperRegisterResponse* response) { return this->MapperRegister(context, request, response); }));}
    void SetMessageAllocatorFor_MapperRegister(
        ::grpc::MessageAllocator< ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MapperRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MapperRegister(::grpc::ServerContext* /*context*/, const ::v1beta1::MapperRegisterRequest* /*request*/, ::v1beta1::MapperRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MapperRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::MapperRegisterRequest* /*request*/, ::v1beta1::MapperRegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportDeviceStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::ReportDeviceStatusRequest* request, ::v1beta1::ReportDeviceStatusResponse* response) { return this->ReportDeviceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_ReportDeviceStatus(
        ::grpc::MessageAllocator< ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStatus(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatusRequest* /*request*/, ::v1beta1::ReportDeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDeviceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::ReportDeviceStatusRequest* /*request*/, ::v1beta1::ReportDeviceStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportDeviceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportDeviceStates() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::ReportDeviceStatesRequest* request, ::v1beta1::ReportDeviceStatesResponse* response) { return this->ReportDeviceStates(context, request, response); }));}
    void SetMessageAllocatorFor_ReportDeviceStates(
        ::grpc::MessageAllocator< ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportDeviceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStates(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatesRequest* /*request*/, ::v1beta1::ReportDeviceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDeviceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::ReportDeviceStatesRequest* /*request*/, ::v1beta1::ReportDeviceStatesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_MapperRegister<WithCallbackMethod_ReportDeviceStatus<WithCallbackMethod_ReportDeviceStates<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_MapperRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MapperRegister() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MapperRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MapperRegister(::grpc::ServerContext* /*context*/, const ::v1beta1::MapperRegisterRequest* /*request*/, ::v1beta1::MapperRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportDeviceStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReportDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStatus(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatusRequest* /*request*/, ::v1beta1::ReportDeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportDeviceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportDeviceStates() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReportDeviceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStates(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatesRequest* /*request*/, ::v1beta1::ReportDeviceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_MapperRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MapperRegister() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_MapperRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MapperRegister(::grpc::ServerContext* /*context*/, const ::v1beta1::MapperRegisterRequest* /*request*/, ::v1beta1::MapperRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMapperRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportDeviceStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReportDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStatus(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatusRequest* /*request*/, ::v1beta1::ReportDeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDeviceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportDeviceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportDeviceStates() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReportDeviceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStates(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatesRequest* /*request*/, ::v1beta1::ReportDeviceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDeviceStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MapperRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MapperRegister() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MapperRegister(context, request, response); }));
    }
    ~WithRawCallbackMethod_MapperRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MapperRegister(::grpc::ServerContext* /*context*/, const ::v1beta1::MapperRegisterRequest* /*request*/, ::v1beta1::MapperRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MapperRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportDeviceStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportDeviceStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStatus(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatusRequest* /*request*/, ::v1beta1::ReportDeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDeviceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportDeviceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportDeviceStates() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportDeviceStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportDeviceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDeviceStates(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatesRequest* /*request*/, ::v1beta1::ReportDeviceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDeviceStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MapperRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MapperRegister() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::MapperRegisterRequest, ::v1beta1::MapperRegisterResponse>* streamer) {
                       return this->StreamedMapperRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MapperRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MapperRegister(::grpc::ServerContext* /*context*/, const ::v1beta1::MapperRegisterRequest* /*request*/, ::v1beta1::MapperRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMapperRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::MapperRegisterRequest,::v1beta1::MapperRegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportDeviceStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::ReportDeviceStatusRequest, ::v1beta1::ReportDeviceStatusResponse>* streamer) {
                       return this->StreamedReportDeviceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportDeviceStatus(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatusRequest* /*request*/, ::v1beta1::ReportDeviceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportDeviceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::ReportDeviceStatusRequest,::v1beta1::ReportDeviceStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportDeviceStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportDeviceStates() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::ReportDeviceStatesRequest, ::v1beta1::ReportDeviceStatesResponse>* streamer) {
                       return this->StreamedReportDeviceStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportDeviceStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportDeviceStates(::grpc::ServerContext* /*context*/, const ::v1beta1::ReportDeviceStatesRequest* /*request*/, ::v1beta1::ReportDeviceStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportDeviceStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::ReportDeviceStatesRequest,::v1beta1::ReportDeviceStatesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MapperRegister<WithStreamedUnaryMethod_ReportDeviceStatus<WithStreamedUnaryMethod_ReportDeviceStates<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_MapperRegister<WithStreamedUnaryMethod_ReportDeviceStatus<WithStreamedUnaryMethod_ReportDeviceStates<Service > > > StreamedService;
};

// DeviceMapperService defines the public APIS for remote device management.
// The server is implemented by the device mapper
// and the client is implemented by the module of device manager in edgecore for downstreaming.
// The device manager can manage the device life cycle through these interfaces provided by DeviceMapperService.
// When device manager gets a message of device management from cloudcore, it should call the corresponding grpc interface
// to make the mapper maintain the list of device information.
class DeviceMapperService final {
 public:
  static constexpr char const* service_full_name() {
    return "v1beta1.DeviceMapperService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RegisterDevice registers a device to the device mapper.
    // Device manager registers a device instance with the information of device
    // to the mapper through the interface of RegisterDevice.
    // When the mapper gets the request of register with device information,
    // it should add the device to the device list and connect to the real physical device via the specific protocol.
    virtual ::grpc::Status RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::v1beta1::RegisterDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RegisterDeviceResponse>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RegisterDeviceResponse>>(AsyncRegisterDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RegisterDeviceResponse>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RegisterDeviceResponse>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    // RemoveDevice unregisters a device to the device mapper.
    // Device manager unregisters a device instance with the name of device
    // to the mapper through the interface of RemoveDevice.
    // When the mapper gets the request of unregister with device name,
    // it should remove the device from the device list and disconnect to the real physical device.
    virtual ::grpc::Status RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::v1beta1::RemoveDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceResponse>> AsyncRemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceResponse>>(AsyncRemoveDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceResponse>> PrepareAsyncRemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceResponse>>(PrepareAsyncRemoveDeviceRaw(context, request, cq));
    }
    // UpdateDevice updates a device to the device mapper
    // Device manager updates the information of a device used by the mapper
    // through the interface of UpdateDevice.
    // The information of a device includes the meta data and the status data of a device.
    // When the mapper gets the request of updating with the information of a device,
    // it should update the device of the device list and connect to the real physical device via the updated information.
    virtual ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::v1beta1::UpdateDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceResponse>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceResponse>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceResponse>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceResponse>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    // CreateDeviceModel creates a device model to the device mapper.
    // Device manager sends the information of device model to the mapper
    // through the interface of CreateDeviceModel.
    // When the mapper gets the request of creating with the information of device model,
    // it should create a new device model to the list of device models.
    virtual ::grpc::Status CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::v1beta1::CreateDeviceModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::CreateDeviceModelResponse>> AsyncCreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::CreateDeviceModelResponse>>(AsyncCreateDeviceModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::CreateDeviceModelResponse>> PrepareAsyncCreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::CreateDeviceModelResponse>>(PrepareAsyncCreateDeviceModelRaw(context, request, cq));
    }
    // RemoveDeviceModel remove a device model to the device mapper.
    // Device manager sends the name of device model to the mapper
    // through the interface of RemoveDeviceModel.
    // When the mapper gets the request of removing with the name of device model,
    // it should remove the device model to the list of device models.
    virtual ::grpc::Status RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::v1beta1::RemoveDeviceModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceModelResponse>> AsyncRemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceModelResponse>>(AsyncRemoveDeviceModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceModelResponse>> PrepareAsyncRemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceModelResponse>>(PrepareAsyncRemoveDeviceModelRaw(context, request, cq));
    }
    // UpdateDeviceModel update a device model to the device mapper.
    // Device manager sends the information of device model to the mapper
    // through the interface of UpdateDeviceModel.
    // When the mapper gets the request of updating with the information of device model,
    // it should update the device model to the list of device models.
    virtual ::grpc::Status UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::v1beta1::UpdateDeviceModelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceModelResponse>> AsyncUpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceModelResponse>>(AsyncUpdateDeviceModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceModelResponse>> PrepareAsyncUpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceModelResponse>>(PrepareAsyncUpdateDeviceModelRaw(context, request, cq));
    }
    // GetDevice get the information of a device from the device mapper.
    // Device sends the request of querying device information with the device name to the mapper
    // through the interface of GetDevice.
    // When the mapper gets the request of querying with the device name,
    // it should return the device information.
    virtual ::grpc::Status GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::v1beta1::GetDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::GetDeviceResponse>> AsyncGetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::GetDeviceResponse>>(AsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::GetDeviceResponse>> PrepareAsyncGetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::GetDeviceResponse>>(PrepareAsyncGetDeviceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RegisterDevice registers a device to the device mapper.
      // Device manager registers a device instance with the information of device
      // to the mapper through the interface of RegisterDevice.
      // When the mapper gets the request of register with device information,
      // it should add the device to the device list and connect to the real physical device via the specific protocol.
      virtual void RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RemoveDevice unregisters a device to the device mapper.
      // Device manager unregisters a device instance with the name of device
      // to the mapper through the interface of RemoveDevice.
      // When the mapper gets the request of unregister with device name,
      // it should remove the device from the device list and disconnect to the real physical device.
      virtual void RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateDevice updates a device to the device mapper
      // Device manager updates the information of a device used by the mapper
      // through the interface of UpdateDevice.
      // The information of a device includes the meta data and the status data of a device.
      // When the mapper gets the request of updating with the information of a device,
      // it should update the device of the device list and connect to the real physical device via the updated information.
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CreateDeviceModel creates a device model to the device mapper.
      // Device manager sends the information of device model to the mapper
      // through the interface of CreateDeviceModel.
      // When the mapper gets the request of creating with the information of device model,
      // it should create a new device model to the list of device models.
      virtual void CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RemoveDeviceModel remove a device model to the device mapper.
      // Device manager sends the name of device model to the mapper
      // through the interface of RemoveDeviceModel.
      // When the mapper gets the request of removing with the name of device model,
      // it should remove the device model to the list of device models.
      virtual void RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateDeviceModel update a device model to the device mapper.
      // Device manager sends the information of device model to the mapper
      // through the interface of UpdateDeviceModel.
      // When the mapper gets the request of updating with the information of device model,
      // it should update the device model to the list of device models.
      virtual void UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetDevice get the information of a device from the device mapper.
      // Device sends the request of querying device information with the device name to the mapper
      // through the interface of GetDevice.
      // When the mapper gets the request of querying with the device name,
      // it should return the device information.
      virtual void GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RegisterDeviceResponse>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RegisterDeviceResponse>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceResponse>* AsyncRemoveDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceResponse>* PrepareAsyncRemoveDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceResponse>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceResponse>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::CreateDeviceModelResponse>* AsyncCreateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::CreateDeviceModelResponse>* PrepareAsyncCreateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceModelResponse>* AsyncRemoveDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::RemoveDeviceModelResponse>* PrepareAsyncRemoveDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceModelResponse>* AsyncUpdateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::UpdateDeviceModelResponse>* PrepareAsyncUpdateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::GetDeviceResponse>* AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v1beta1::GetDeviceResponse>* PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::v1beta1::RegisterDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>> AsyncRegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>>(AsyncRegisterDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>> PrepareAsyncRegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>>(PrepareAsyncRegisterDeviceRaw(context, request, cq));
    }
    ::grpc::Status RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::v1beta1::RemoveDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>> AsyncRemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>>(AsyncRemoveDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>> PrepareAsyncRemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>>(PrepareAsyncRemoveDeviceRaw(context, request, cq));
    }
    ::grpc::Status UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::v1beta1::UpdateDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>> AsyncUpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>>(AsyncUpdateDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>> PrepareAsyncUpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>>(PrepareAsyncUpdateDeviceRaw(context, request, cq));
    }
    ::grpc::Status CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::v1beta1::CreateDeviceModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>> AsyncCreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>>(AsyncCreateDeviceModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>> PrepareAsyncCreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>>(PrepareAsyncCreateDeviceModelRaw(context, request, cq));
    }
    ::grpc::Status RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::v1beta1::RemoveDeviceModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>> AsyncRemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>>(AsyncRemoveDeviceModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>> PrepareAsyncRemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>>(PrepareAsyncRemoveDeviceModelRaw(context, request, cq));
    }
    ::grpc::Status UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::v1beta1::UpdateDeviceModelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>> AsyncUpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>>(AsyncUpdateDeviceModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>> PrepareAsyncUpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>>(PrepareAsyncUpdateDeviceModelRaw(context, request, cq));
    }
    ::grpc::Status GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::v1beta1::GetDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>> AsyncGetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>>(AsyncGetDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>> PrepareAsyncGetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>>(PrepareAsyncGetDeviceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterDevice(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveDevice(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDevice(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveDeviceModel(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDeviceModel(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDevice(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>* AsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::RegisterDeviceResponse>* PrepareAsyncRegisterDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RegisterDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>* AsyncRemoveDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceResponse>* PrepareAsyncRemoveDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>* AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceResponse>* PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>* AsyncCreateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::CreateDeviceModelResponse>* PrepareAsyncCreateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::CreateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>* AsyncRemoveDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::RemoveDeviceModelResponse>* PrepareAsyncRemoveDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::RemoveDeviceModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>* AsyncUpdateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::UpdateDeviceModelResponse>* PrepareAsyncUpdateDeviceModelRaw(::grpc::ClientContext* context, const ::v1beta1::UpdateDeviceModelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>* AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v1beta1::GetDeviceResponse>* PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::v1beta1::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDeviceModel_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveDeviceModel_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDeviceModel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RegisterDevice registers a device to the device mapper.
    // Device manager registers a device instance with the information of device
    // to the mapper through the interface of RegisterDevice.
    // When the mapper gets the request of register with device information,
    // it should add the device to the device list and connect to the real physical device via the specific protocol.
    virtual ::grpc::Status RegisterDevice(::grpc::ServerContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response);
    // RemoveDevice unregisters a device to the device mapper.
    // Device manager unregisters a device instance with the name of device
    // to the mapper through the interface of RemoveDevice.
    // When the mapper gets the request of unregister with device name,
    // it should remove the device from the device list and disconnect to the real physical device.
    virtual ::grpc::Status RemoveDevice(::grpc::ServerContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response);
    // UpdateDevice updates a device to the device mapper
    // Device manager updates the information of a device used by the mapper
    // through the interface of UpdateDevice.
    // The information of a device includes the meta data and the status data of a device.
    // When the mapper gets the request of updating with the information of a device,
    // it should update the device of the device list and connect to the real physical device via the updated information.
    virtual ::grpc::Status UpdateDevice(::grpc::ServerContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response);
    // CreateDeviceModel creates a device model to the device mapper.
    // Device manager sends the information of device model to the mapper
    // through the interface of CreateDeviceModel.
    // When the mapper gets the request of creating with the information of device model,
    // it should create a new device model to the list of device models.
    virtual ::grpc::Status CreateDeviceModel(::grpc::ServerContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response);
    // RemoveDeviceModel remove a device model to the device mapper.
    // Device manager sends the name of device model to the mapper
    // through the interface of RemoveDeviceModel.
    // When the mapper gets the request of removing with the name of device model,
    // it should remove the device model to the list of device models.
    virtual ::grpc::Status RemoveDeviceModel(::grpc::ServerContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response);
    // UpdateDeviceModel update a device model to the device mapper.
    // Device manager sends the information of device model to the mapper
    // through the interface of UpdateDeviceModel.
    // When the mapper gets the request of updating with the information of device model,
    // it should update the device model to the list of device models.
    virtual ::grpc::Status UpdateDeviceModel(::grpc::ServerContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response);
    // GetDevice get the information of a device from the device mapper.
    // Device sends the request of querying device information with the device name to the mapper
    // through the interface of GetDevice.
    // When the mapper gets the request of querying with the device name,
    // it should return the device information.
    virtual ::grpc::Status GetDevice(::grpc::ServerContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RegisterDeviceRequest* /*request*/, ::v1beta1::RegisterDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::v1beta1::RegisterDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::RegisterDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveDevice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RemoveDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceRequest* /*request*/, ::v1beta1::RemoveDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDevice(::grpc::ServerContext* context, ::v1beta1::RemoveDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::RemoveDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceRequest* /*request*/, ::v1beta1::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::v1beta1::UpdateDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::UpdateDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDeviceModel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::CreateDeviceModelRequest* /*request*/, ::v1beta1::CreateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeviceModel(::grpc::ServerContext* context, ::v1beta1::CreateDeviceModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::CreateDeviceModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveDeviceModel() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceModelRequest* /*request*/, ::v1beta1::RemoveDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDeviceModel(::grpc::ServerContext* context, ::v1beta1::RemoveDeviceModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::RemoveDeviceModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDeviceModel() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceModelRequest* /*request*/, ::v1beta1::UpdateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDeviceModel(::grpc::ServerContext* context, ::v1beta1::UpdateDeviceModelRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::UpdateDeviceModelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevice() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::GetDeviceRequest* /*request*/, ::v1beta1::GetDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevice(::grpc::ServerContext* context, ::v1beta1::GetDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::v1beta1::GetDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterDevice<WithAsyncMethod_RemoveDevice<WithAsyncMethod_UpdateDevice<WithAsyncMethod_CreateDeviceModel<WithAsyncMethod_RemoveDeviceModel<WithAsyncMethod_UpdateDeviceModel<WithAsyncMethod_GetDevice<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::RegisterDeviceRequest* request, ::v1beta1::RegisterDeviceResponse* response) { return this->RegisterDevice(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterDevice(
        ::grpc::MessageAllocator< ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RegisterDeviceRequest* /*request*/, ::v1beta1::RegisterDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::RegisterDeviceRequest* /*request*/, ::v1beta1::RegisterDeviceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveDevice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::RemoveDeviceRequest* request, ::v1beta1::RemoveDeviceResponse* response) { return this->RemoveDevice(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveDevice(
        ::grpc::MessageAllocator< ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceRequest* /*request*/, ::v1beta1::RemoveDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::RemoveDeviceRequest* /*request*/, ::v1beta1::RemoveDeviceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::UpdateDeviceRequest* request, ::v1beta1::UpdateDeviceResponse* response) { return this->UpdateDevice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDevice(
        ::grpc::MessageAllocator< ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceRequest* /*request*/, ::v1beta1::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::UpdateDeviceRequest* /*request*/, ::v1beta1::UpdateDeviceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateDeviceModel() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::CreateDeviceModelRequest* request, ::v1beta1::CreateDeviceModelResponse* response) { return this->CreateDeviceModel(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDeviceModel(
        ::grpc::MessageAllocator< ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::CreateDeviceModelRequest* /*request*/, ::v1beta1::CreateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDeviceModel(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::CreateDeviceModelRequest* /*request*/, ::v1beta1::CreateDeviceModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveDeviceModel() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::RemoveDeviceModelRequest* request, ::v1beta1::RemoveDeviceModelResponse* response) { return this->RemoveDeviceModel(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveDeviceModel(
        ::grpc::MessageAllocator< ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceModelRequest* /*request*/, ::v1beta1::RemoveDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveDeviceModel(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::RemoveDeviceModelRequest* /*request*/, ::v1beta1::RemoveDeviceModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDeviceModel() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::UpdateDeviceModelRequest* request, ::v1beta1::UpdateDeviceModelResponse* response) { return this->UpdateDeviceModel(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDeviceModel(
        ::grpc::MessageAllocator< ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceModelRequest* /*request*/, ::v1beta1::UpdateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDeviceModel(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::UpdateDeviceModelRequest* /*request*/, ::v1beta1::UpdateDeviceModelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDevice() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::v1beta1::GetDeviceRequest* request, ::v1beta1::GetDeviceResponse* response) { return this->GetDevice(context, request, response); }));}
    void SetMessageAllocatorFor_GetDevice(
        ::grpc::MessageAllocator< ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::GetDeviceRequest* /*request*/, ::v1beta1::GetDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::v1beta1::GetDeviceRequest* /*request*/, ::v1beta1::GetDeviceResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterDevice<WithCallbackMethod_RemoveDevice<WithCallbackMethod_UpdateDevice<WithCallbackMethod_CreateDeviceModel<WithCallbackMethod_RemoveDeviceModel<WithCallbackMethod_UpdateDeviceModel<WithCallbackMethod_GetDevice<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RegisterDeviceRequest* /*request*/, ::v1beta1::RegisterDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveDevice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RemoveDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceRequest* /*request*/, ::v1beta1::RemoveDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceRequest* /*request*/, ::v1beta1::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDeviceModel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::CreateDeviceModelRequest* /*request*/, ::v1beta1::CreateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveDeviceModel() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceModelRequest* /*request*/, ::v1beta1::RemoveDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDeviceModel() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceModelRequest* /*request*/, ::v1beta1::UpdateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevice() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::GetDeviceRequest* /*request*/, ::v1beta1::GetDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RegisterDeviceRequest* /*request*/, ::v1beta1::RegisterDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveDevice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RemoveDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceRequest* /*request*/, ::v1beta1::RemoveDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceRequest* /*request*/, ::v1beta1::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDeviceModel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::CreateDeviceModelRequest* /*request*/, ::v1beta1::CreateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeviceModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveDeviceModel() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceModelRequest* /*request*/, ::v1beta1::RemoveDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDeviceModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDeviceModel() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceModelRequest* /*request*/, ::v1beta1::UpdateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDeviceModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevice() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::GetDeviceRequest* /*request*/, ::v1beta1::GetDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RegisterDeviceRequest* /*request*/, ::v1beta1::RegisterDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveDevice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceRequest* /*request*/, ::v1beta1::RemoveDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceRequest* /*request*/, ::v1beta1::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateDeviceModel() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDeviceModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::CreateDeviceModelRequest* /*request*/, ::v1beta1::CreateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateDeviceModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveDeviceModel() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveDeviceModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceModelRequest* /*request*/, ::v1beta1::RemoveDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveDeviceModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDeviceModel() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDeviceModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceModelRequest* /*request*/, ::v1beta1::UpdateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDeviceModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDevice() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::GetDeviceRequest* /*request*/, ::v1beta1::GetDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterDevice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::RegisterDeviceRequest, ::v1beta1::RegisterDeviceResponse>* streamer) {
                       return this->StreamedRegisterDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RegisterDeviceRequest* /*request*/, ::v1beta1::RegisterDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::RegisterDeviceRequest,::v1beta1::RegisterDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveDevice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::RemoveDeviceRequest, ::v1beta1::RemoveDeviceResponse>* streamer) {
                       return this->StreamedRemoveDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceRequest* /*request*/, ::v1beta1::RemoveDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::RemoveDeviceRequest,::v1beta1::RemoveDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDevice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::UpdateDeviceRequest, ::v1beta1::UpdateDeviceResponse>* streamer) {
                       return this->StreamedUpdateDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceRequest* /*request*/, ::v1beta1::UpdateDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::UpdateDeviceRequest,::v1beta1::UpdateDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDeviceModel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::CreateDeviceModelRequest, ::v1beta1::CreateDeviceModelResponse>* streamer) {
                       return this->StreamedCreateDeviceModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::CreateDeviceModelRequest* /*request*/, ::v1beta1::CreateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDeviceModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::CreateDeviceModelRequest,::v1beta1::CreateDeviceModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveDeviceModel() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::RemoveDeviceModelRequest, ::v1beta1::RemoveDeviceModelResponse>* streamer) {
                       return this->StreamedRemoveDeviceModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::RemoveDeviceModelRequest* /*request*/, ::v1beta1::RemoveDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveDeviceModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::RemoveDeviceModelRequest,::v1beta1::RemoveDeviceModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDeviceModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDeviceModel() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::UpdateDeviceModelRequest, ::v1beta1::UpdateDeviceModelResponse>* streamer) {
                       return this->StreamedUpdateDeviceModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDeviceModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDeviceModel(::grpc::ServerContext* /*context*/, const ::v1beta1::UpdateDeviceModelRequest* /*request*/, ::v1beta1::UpdateDeviceModelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDeviceModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::UpdateDeviceModelRequest,::v1beta1::UpdateDeviceModelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDevice() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::v1beta1::GetDeviceRequest, ::v1beta1::GetDeviceResponse>* streamer) {
                       return this->StreamedGetDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevice(::grpc::ServerContext* /*context*/, const ::v1beta1::GetDeviceRequest* /*request*/, ::v1beta1::GetDeviceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v1beta1::GetDeviceRequest,::v1beta1::GetDeviceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterDevice<WithStreamedUnaryMethod_RemoveDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_CreateDeviceModel<WithStreamedUnaryMethod_RemoveDeviceModel<WithStreamedUnaryMethod_UpdateDeviceModel<WithStreamedUnaryMethod_GetDevice<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterDevice<WithStreamedUnaryMethod_RemoveDevice<WithStreamedUnaryMethod_UpdateDevice<WithStreamedUnaryMethod_CreateDeviceModel<WithStreamedUnaryMethod_RemoveDeviceModel<WithStreamedUnaryMethod_UpdateDeviceModel<WithStreamedUnaryMethod_GetDevice<Service > > > > > > > StreamedService;
};

}  // namespace v1beta1


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_api_2eproto__INCLUDED
