/*
Copyright 2019 The Kubeedge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cmd

import (
	"fmt"
	"io"

	"github.com/spf13/cobra"

	"github.com/kubeedge/kubeedge/kubeedgeinst/app/cmd/options"
)

var (
	nodeJoinLongDescription = `
node command bootstraps KubeEdge's node component.
It checks if the pre-requisites are installed already,
If not installed, this command will help in download,
install and execute on the host.
It will also connect with cloud component to receieve 
further instructions and forward telemetry data from 
devices to cloud
`
	nodeJoinExample = `
kubeedge node join --certPath <path> --server <ip:port> 
`
)

// NewNodeJoin returns KubeEdge node join command.
func NewNodeJoin(out io.Writer, joinOptions *options.JoinOptions) *cobra.Command {
	if joinOptions == nil {
		joinOptions = newJoinOptions()
	}

	cmd := &cobra.Command{
		Use:     "join",
		Short:   "Run this on any machine you wish to join an existing cluster",
		Long:    nodeJoinLongDescription,
		Example: nodeJoinExample,
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("node join called")

		},
	}

	addJoinOtherFlags(cmd, joinOptions)
	return cmd
}

func addJoinOtherFlags(cmd *cobra.Command, joinOptions *options.JoinOptions) {

	// --certPath           string   downloaded path of the certifcates generated by cloud component in this host (Mandatory)
	// --docker-version     string   use this key to download and use the required Docker version (Optional, default will be Latest)
	// --kubeedge-version   string   use this key to download and use the required KubeEdge version (Optional, default will be Latest)
	// --kubernetes-version string   use this key to download and use the required Kubernetes version (Optional, default will be Latest)
	// -s, --server             string   ip:port address of cloud components host/VM (Mandatory)

	cmd.Flags().StringVar(&joinOptions.KubeedgeVersion, options.KubeedgeVersion, joinOptions.KubeedgeVersion,
		"Use this key to download and use the required KubeEdge version")
	cmd.Flags().StringVar(&joinOptions.DockerVersion, options.DockerVersion, joinOptions.DockerVersion,
		"Use this key to download and use the required Docker version")
	cmd.Flags().StringVar(&joinOptions.Kubernetesversion, options.Kubernetesversion, joinOptions.Kubernetesversion,
		"Use this key to download and use the required Kubernetes version")
	cmd.Flags().StringVar(&joinOptions.CertPath, options.CertPath, joinOptions.CertPath,
		"Downloaded path of the certifcates generated by cloud component in this host")
	cmd.MarkFlagRequired(options.CertPath)
	cmd.Flags().StringVarP(&joinOptions.K8SAPIServerIPPort, options.K8SAPIServerIPPort, "s", joinOptions.K8SAPIServerIPPort,
		"IP:Port address of cloud components host/VM")
	cmd.MarkFlagRequired(options.K8SAPIServerIPPort)
}

// newJoinOptions returns a struct ready for being used for creating cmd join flags.
func newJoinOptions() *options.JoinOptions {
	return &options.JoinOptions{}
}
