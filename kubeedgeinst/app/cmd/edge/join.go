/*
Copyright 2019 The Kubeedge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cmd

import (
	"fmt"
	"io"

	"github.com/spf13/cobra"
	"github.com/spf13/pflag"

	"github.com/kubeedge/kubeedge/kubeedgeinst/app/cmd/options"
	"github.com/kubeedge/kubeedge/kubeedgeinst/app/cmd/util"
)

var (
	edgeJoinLongDescription = `
edge command bootstraps KubeEdge's edge component.
It checks if the pre-requisites are installed already,
If not installed, this command will help in download,
install and execute on the host.
It will also connect with cloud component to receieve 
further instructions and forward telemetry data from 
devices to cloud
`
	edgeJoinExample = `
kectl edge join --server=<ip:port> --kubeedge-version

  - For this command --server & --kubeedge-version option is a Mandatory option
  - This command will download and install the default version of pre-requisites and KubeEdge

kectl edge join --server=10.20.30.40:8080 --docker-version= --kubeedge-version=0.2.1 --kubernetes-version=1.14.1

  - In case, any option is used in a format like as shown for "--docker-version" or "--docker-version=", without a value
    then default values will be used. 
`
)

type FlagData struct {
	Val    interface{}
	DefVal interface{}
}

// NewEdgeJoin returns KubeEdge edge join command.
func NewEdgeJoin(out io.Writer, joinOptions *options.JoinOptions) *cobra.Command {
	if joinOptions == nil {
		joinOptions = newJoinOptions()
	}

	tools := make(map[string]util.ToolsInstaller, 0)
	flagVals := make(map[string]FlagData, 0)

	cmd := &cobra.Command{
		Use:     "join",
		Short:   "Run this on any machine you wish to join an existing cluster",
		Long:    edgeJoinLongDescription,
		Example: edgeJoinExample,
		Run: func(cmd *cobra.Command, args []string) {

			checkFlags := func(f *pflag.Flag) {
				AddToolVals(f, flagVals)
			}
			cmd.Flags().VisitAll(checkFlags)
			Add2ToolsList(tools, flagVals, joinOptions)
			Execute(tools)
		},
	}

	addJoinOtherFlags(cmd, joinOptions)
	return cmd
}

func addJoinOtherFlags(cmd *cobra.Command, joinOptions *options.JoinOptions) {

	cmd.Flags().StringVar(&joinOptions.KubeedgeVersion, options.KubeedgeVersion, joinOptions.KubeedgeVersion,
		"Use this key to download and use the required KubeEdge version")
	cmd.Flags().Lookup(options.KubeedgeVersion).NoOptDefVal = joinOptions.KubeedgeVersion
	//cmd.MarkFlagRequired(options.KubeedgeVersion)

	cmd.Flags().StringVar(&joinOptions.DockerVersion, options.DockerVersion, joinOptions.DockerVersion,
		"Use this key to download and use the required Docker version")
	cmd.Flags().Lookup(options.DockerVersion).NoOptDefVal = joinOptions.DockerVersion

	cmd.Flags().StringVar(&joinOptions.Kubernetesversion, options.Kubernetesversion, joinOptions.Kubernetesversion,
		"Use this key to download and use the required Kubernetes version")
	cmd.Flags().Lookup(options.Kubernetesversion).NoOptDefVal = joinOptions.Kubernetesversion

	// cmd.Flags().StringVar(&joinOptions.CertPath, options.CertPath, joinOptions.CertPath,
	// 	"Downloaded path of the certifcates generated by cloud component in this host")
	// cmd.Flags().Lookup(options.CertPath).NoOptDefVal = joinOptions.CertPath

	cmd.Flags().StringVarP(&joinOptions.K8SAPIServerIPPort, options.K8SAPIServerIPPort, "s", joinOptions.K8SAPIServerIPPort,
		"IP:Port address of cloud components host/VM")
	cmd.MarkFlagRequired(options.K8SAPIServerIPPort)
}

// newJoinOptions returns a struct ready for being used for creating cmd join flags.
func newJoinOptions() *options.JoinOptions {
	opts := &options.JoinOptions{}
	opts.InitOptions = options.InitOptions{DockerVersion: options.DefaultDockerVersion, KubeedgeVersion: options.DefaultKubeEdgeVersion,
		Kubernetesversion: options.DefaultK8SVersion}
	opts.CertPath = options.DefaultCertPath
	return opts
}

func AddToolVals(f *pflag.Flag, flagData map[string]FlagData) {
	fmt.Println(f.Name, "VAL:", f.Value, "DEFVAL:", f.DefValue)
	flagData[f.Name] = FlagData{Val: f.Value.String(), DefVal: f.DefValue}
}

func Add2ToolsList(toolList map[string]util.ToolsInstaller, flagData map[string]FlagData, joinOptions *options.JoinOptions) {

	var kubeVer, dockerVer, k8sVer string

	fmt.Println(flagData)

	flgData, ok := flagData[options.KubeedgeVersion]
	if ok {
		fmt.Println(options.KubeedgeVersion, "VAL:", flgData.Val.(string), "DEFVAL:", flgData.DefVal.(string))
		kubeVer = CheckIfAvailable(flgData.Val.(string), flgData.DefVal.(string))
	} else {
		kubeVer = joinOptions.KubeedgeVersion
	}
	fmt.Println(options.KubeedgeVersion, "VAL:", kubeVer, "DEFVAL:", flgData.DefVal.(string))
	toolList["KubeEdge"] = &util.KubeEdgeInstTool{Common: util.Common{ToolVersion: kubeVer}, K8SApiServerIP: joinOptions.K8SAPIServerIPPort}

	flgData, ok = flagData[options.DockerVersion]
	if ok {
		fmt.Println(options.DockerVersion, "VAL:", flgData.Val.(string), "DEFVAL:", flgData.DefVal.(string))
		dockerVer = CheckIfAvailable(flgData.Val.(string), flgData.DefVal.(string))
	} else {
		dockerVer = joinOptions.DockerVersion
	}
	fmt.Println(options.DockerVersion, "VAL:", dockerVer, "DEFVAL:", flgData.DefVal.(string))
	toolList["Docker"] = &util.DockerInstTool{Common: util.Common{ToolVersion: dockerVer}, DefaultToolVer: flgData.DefVal.(string)}

	flgData, ok = flagData[options.Kubernetesversion]
	if ok {
		fmt.Println(options.Kubernetesversion, "VAL:", flgData.Val.(string), "DEFVAL:", flgData.DefVal.(string))
		k8sVer = CheckIfAvailable(flgData.Val.(string), flgData.DefVal.(string))
	} else {
		k8sVer = joinOptions.Kubernetesversion
	}
	fmt.Println(options.Kubernetesversion, "VAL:", k8sVer, "DEFVAL:", flgData.DefVal.(string))
	toolList["Kubernetes"] = &util.K8SInstTool{Common: util.Common{ToolVersion: k8sVer}, IsEdgeNode: true, DefaultToolVer: flgData.DefVal.(string)}
	toolList["MQTT"] = &util.MQTTInstTool{}
	fmt.Println(toolList)
}

func CheckIfAvailable(val, defval string) string {
	if val == "" {
		return defval
	}
	return val
}

func Execute(toolList map[string]util.ToolsInstaller) {

	fmt.Println(toolList)
	//Install all the required pre-requisite tools
	for name, tool := range toolList {
		if name != "KubeEdge" {
			err := tool.InstallTools()
			if err != nil {
				fmt.Println(err.Error())
				continue
			}
		}
	}
	//Install and Start KubeEdge Node
	err := toolList["KubeEdge"].InstallTools()
	if err != nil {
		fmt.Println(err.Error())
	}
}
